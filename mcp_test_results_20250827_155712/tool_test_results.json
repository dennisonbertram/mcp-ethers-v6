{
  "timestamp": "2025-08-27T20:00:13.778Z",
  "totalTools": 45,
  "testedTools": 45,
  "passedTools": 14,
  "failedTools": 31,
  "skippedTools": 0,
  "results": {
    "getSupportedNetworks": {
      "description": "Get a list of all supported networks and their configurations. For more detailed information about networks, use the getAllNetworks and getNetwork tools.",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [],
      "summary": {
        "passed": 0,
        "failed": 0,
        "total": 0
      }
    },
    "getBlockNumber": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "Current block number: 23234703"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "Current block number: 23234703"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 994185
          },
          "timestamp": "2025-08-27T20:00:15.114Z"
        },
        {
          "params": {
            "provider": "ethereum"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "Current block number: 23234703"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "Current block number: 23234703"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 908779
          },
          "timestamp": "2025-08-27T20:00:15.319Z"
        },
        {
          "params": {
            "chainId": 1
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "Current block number: 23234703"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "Current block number: 23234703"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 729725
          },
          "timestamp": "2025-08-27T20:00:15.520Z"
        }
      ],
      "summary": {
        "passed": 3,
        "failed": 0,
        "total": 3
      }
    },
    "getGasPrice": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "Current gas price: 0.636117717 gwei (636117717 wei)"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "Current gas price: 0.636117717 gwei (636117717 wei)"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 355916
          },
          "timestamp": "2025-08-27T20:00:15.942Z"
        },
        {
          "params": {
            "provider": "polygon"
          },
          "success": false,
          "exception": "Response timeout",
          "error": {},
          "timestamp": "2025-08-27T20:00:31.046Z"
        }
      ],
      "summary": {
        "passed": 1,
        "failed": 1,
        "total": 2
      }
    },
    "getFeeData": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "Fee Data:\nGas Price: 0.652646141 gwei\nMax Fee Per Gas: 1.304592282 gwei\nMax Priority Fee Per Gas: 0.0007 gwei"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "Fee Data:\nGas Price: 0.652646141 gwei\nMax Fee Per Gas: 1.304592282 gwei\nMax Priority Fee Per Gas: 0.0007 gwei"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 473051
          },
          "timestamp": "2025-08-27T20:00:31.733Z"
        },
        {
          "params": {
            "provider": "ethereum"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "Fee Data:\nGas Price: 0.652646141 gwei\nMax Fee Per Gas: 1.304592282 gwei\nMax Priority Fee Per Gas: 0.0007 gwei"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "Fee Data:\nGas Price: 0.652646141 gwei\nMax Fee Per Gas: 1.304592282 gwei\nMax Priority Fee Per Gas: 0.0007 gwei"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 128518
          },
          "timestamp": "2025-08-27T20:00:32.004Z"
        }
      ],
      "summary": {
        "passed": 2,
        "failed": 0,
        "total": 2
      }
    },
    "generateWallet": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "saveToEnv": {
            "type": "boolean",
            "description": "Optional. If true, the private key will be saved to the server's environment variables for future use. Default is false."
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "\nNew wallet generated:\nAddress: 0x5921ff73015A9deF365A78798f3e3190CA4D2991\nPrivate Key: 0x9e290270cfe7e5826a1982d079afcd1bc6151bc4edd53f42d29ce2f5fd3da268\n\n"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "\nNew wallet generated:\nAddress: 0x5921ff73015A9deF365A78798f3e3190CA4D2991\nPrivate Key: 0x9e290270cfe7e5826a1982d079afcd1bc6151bc4edd53f42d29ce2f5fd3da268\n\n"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 114866
          },
          "timestamp": "2025-08-27T20:00:32.349Z"
        },
        {
          "params": {
            "saveToEnv": false
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "\nNew wallet generated:\nAddress: 0x0FC7537F1636d7Dd5B321E7538975dE1992a86bd\nPrivate Key: 0x962506bc2f985e6455fac87747f6730bef1532c7a2e2555bd8de760ab2b360a4\n\n"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "\nNew wallet generated:\nAddress: 0x0FC7537F1636d7Dd5B321E7538975dE1992a86bd\nPrivate Key: 0x962506bc2f985e6455fac87747f6730bef1532c7a2e2555bd8de760ab2b360a4\n\n"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 608966
          },
          "timestamp": "2025-08-27T20:00:32.463Z"
        }
      ],
      "summary": {
        "passed": 2,
        "failed": 0,
        "total": 2
      }
    },
    "loadWallet": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "privateKey": {
            "type": "string",
            "description": "The private key of the wallet to load. Should start with '0x'."
          },
          "saveToEnv": {
            "type": "boolean",
            "description": "Optional. If true, the private key will be saved to the server's environment variables for this session. Default is true."
          }
        },
        "required": [
          "privateKey"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool loadWallet: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"privateKey\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 33104,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool loadWallet: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"privateKey\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:32.765Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "checkWalletExists": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          }
        },
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "null"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "null"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 116522
          },
          "timestamp": "2025-08-27T20:00:33.068Z"
        }
      ],
      "summary": {
        "passed": 1,
        "failed": 0,
        "total": 1
      }
    },
    "getWalletBalance": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The Ethereum address to query"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "address"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "address": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "Balance of 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045: 4.787485422738848697 ETH (4787485422738848697 wei)"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "Balance of 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045: 4.787485422738848697 ETH (4787485422738848697 wei)"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 310099
          },
          "timestamp": "2025-08-27T20:00:33.549Z"
        }
      ],
      "summary": {
        "passed": 1,
        "failed": 0,
        "total": 1
      }
    },
    "formatEther": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "wei": {
            "type": "string",
            "description": "The wei value to format"
          }
        },
        "required": [
          "wei"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "wei": "1000000000000000000"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "1.0"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "1.0"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 61696
          },
          "timestamp": "2025-08-27T20:00:33.852Z"
        },
        {
          "params": {
            "wei": "500000000000000000"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "0.5"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "0.5"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 341958
          },
          "timestamp": "2025-08-27T20:00:33.954Z"
        }
      ],
      "summary": {
        "passed": 2,
        "failed": 0,
        "total": 2
      }
    },
    "parseEther": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "ether": {
            "type": "string",
            "description": "The ether value to parse"
          }
        },
        "required": [
          "ether"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "ether": "1.0"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "1000000000000000000"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "1000000000000000000"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 661150
          },
          "timestamp": "2025-08-27T20:00:34.258Z"
        },
        {
          "params": {
            "ether": "0.5"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "500000000000000000"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "500000000000000000"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 145401
          },
          "timestamp": "2025-08-27T20:00:34.359Z"
        }
      ],
      "summary": {
        "passed": 2,
        "failed": 0,
        "total": 2
      }
    },
    "formatUnits": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value to format"
          },
          "unit": {
            "type": [
              "string",
              "number"
            ],
            "description": "The number of decimals or unit name (e.g., 'gwei', 18)"
          }
        },
        "required": [
          "value",
          "unit"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "value": "1000000",
            "unit": 6
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "1.0"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "1.0"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 59979
          },
          "timestamp": "2025-08-27T20:00:34.662Z"
        },
        {
          "params": {
            "value": "1000000000",
            "unit": "gwei"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "1.0"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "1.0"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 125881
          },
          "timestamp": "2025-08-27T20:00:34.764Z"
        }
      ],
      "summary": {
        "passed": 2,
        "failed": 0,
        "total": 2
      }
    },
    "getWalletTransactionCount": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The Ethereum address to query"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "address"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "address": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "Transaction count for 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045: 1088"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "Transaction count for 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045: 1088"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 46877
          },
          "timestamp": "2025-08-27T20:00:35.067Z"
        }
      ],
      "summary": {
        "passed": 1,
        "failed": 0,
        "total": 1
      }
    },
    "getBlockDetails": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "blockTag": {
            "type": [
              "string",
              "number"
            ],
            "description": "The block number or the string 'latest'"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "blockTag"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "blockTag": "latest"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "{\n  \"_type\": \"Block\",\n  \"baseFeePerGas\": \"651946141\",\n  \"difficulty\": \"0\",\n  \"extraData\": \"0x546974616e2028746974616e6275696c6465722e78797a29\",\n  \"gasLimit\": \"45000000\",\n  \"gasUsed\": \"23591997\",\n  \"blobGasUsed\": \"393216\",\n  \"excessBlobGas\": \"0\",\n  \"hash\": \"0x51ca7c34cd881563cb5565364cfe549f2e61ad41e56e29b2c0738d7ce6f58428\",\n  \"miner\": \"0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97\",\n  \"prevRandao\": \"0x50cfa5424e8c18e60d5acd28604feeaaccf5dc496be2f44b09a9710c24714c0d\",\n  \"nonce\": \"0x0000000000000000\",\n  \"number\": 23234704,\n  \"parentHash\": \"0x509cd46c747f174ffa941113bf21934ebb3f0ac89507ceaa06c11c0432cd1dd8\",\n  \"timestamp\": 1756324823,\n  \"parentBeaconBlockRoot\": \"0x28bdaaffcfcabd0c4d609e9405f4aeb6f716c6938d5bbee831b3a3930d1c41e3\",\n  \"stateRoot\": \"0xd5f61c124a1d3e61edea5e987720011240147172e6d1d0ad618c6c6ccc84db07\",\n  \"receiptsRoot\": \"0xb264272294a512c5719e801b19eed02546ab95c48a18648a01e2bbd7bda1fec9\",\n  \"transactions\": [\n    \"0x8d6c7f03a97c3f0fcebd6b986d163850599abcc37510504c97b259059e5a42d5\",\n    \"0xd78c5f5772596418bc4018d88fd3b156f21a7a7a3b889e7eaaf302c8858d93f6\",\n    \"0x401ec97f0b30871ba41452283c718452109a4ee972e6d37a8b803ef54f22796b\",\n    \"0xd59bdeabc3ce0d90e68666f5967814b29179b0f054dc0adf8d87cf2e16725c9b\",\n    \"0xa942c12d40aa4a1292c17baace5b2007974f67095ba54ba7643420ffdaef1570\",\n    \"0xcdb8fa105ccbcec82f704063da93c404e0f9929f17edd7151675d6c460edfaf2\",\n    \"0xf83411f86f39cbfa004a098617812564b1b4f382416c7ab56455e45f5fd5535a\",\n    \"0x42479d6380f63a6ca879d19ca2d88221ac4a467b29e1b0b766e15a8417a69d6a\",\n    \"0x6c940a09351a9bbeccede7efd50138da51416016e9e001322ad89da26e208c8c\",\n    \"0x9335c8a4ce46b5da196f31fb22b79043f143fdb01d59837d92ff66ee20f58b8c\",\n    \"0x465cd04b20a866625fabfa7aeafad692babab36166e2acdf1870d574b2261e56\",\n    \"0x1ab8346d45313d09409c88fb8a5666d9655958fbf7d0d08958fcf388e187a19e\",\n    \"0x0c568bbf6a2b65d07fa61d104c797f43f953eb7b555a5990a0a14090ecce275c\",\n    \"0xc67bfab5898f42b6f160b1174c4d21cd3ddf0ae5f682099bced4cad38fd3c9e7\",\n    \"0x3efa50fba3617ee0a292299802830a3e49e23266486649295667d3612c350a38\",\n    \"0x4862f47d8a722c7e6e6fc0c5fbb05555e01163cb696b62a05bb475db26cc8107\",\n    \"0x165fd3e016b25542c98c428484915d0bed61384452b9ad296bc0a4462d74b24a\",\n    \"0xde132f193939a236ada7785347ecb80f05834f60d9bfaffde58d0e0c2dd250f3\",\n    \"0x34204ad54d35ab9965b2cc9066f95a8c167344b6815349eb926dcb0762c9819a\",\n    \"0x45763f3fb16a55f2ee037986ba8e0f62d9b9b54b97c2287ce9bc6e1044670ba6\",\n    \"0xbcbafdc76249c3a3c432b6568aa006c2d692d026c0e7caf80fd103ec5a64c376\",\n    \"0xf10a4a8557c5afce9b38cdca5da048e7effbad61e46ff008542338ae6747ae1d\",\n    \"0x2a46d56ff5fad9d831e7ef7851cbd4e2f9a2f5f1b41bea10dff9821bfd6ff497\",\n    \"0xb929be21dcd4fcffe1370961cb8f353add3091eef78d5e1655c34c427da7fe7f\",\n    \"0xaf01d4dc70f01b41998cc73d07eec10f4c77d3114c59c2d774ec19c2f00a8839\",\n    \"0x970e3897db14f5e6d7bb7393ee655313ae009f7c769ff7ffebbd352766626922\",\n    \"0xe897f9f759e080c428db500993b1add08c1ad675cafac4e48ca15939006cd3f8\",\n    \"0x390af942d7f9da58115e528b7a19cbc6b18ef27e6b62c67c28e6eee07b049842\",\n    \"0x717aef00049158e4823ee1bc39b56f26a093b6179c9ca2311aab32a37d8ac763\",\n    \"0x47c8996bb242e640da25213d9a2d18d61d58e6762b344f52cd4fab1d6b034d3d\",\n    \"0x975ffa606becc1dd6d09502004603c6126129d4ed854ab3a4a620a351b7a430f\",\n    \"0x2268e1da47a2e43eb02a60870aaad014291dcd33202487df04c3c469d5d29209\",\n    \"0x85f2d8ec8ad5ef5f684c6cfcd3610e6791f783da5c647ce24fcc4a0dac888e12\",\n    \"0x195766e68230e398d0523a884d9804b18a49f9b2bec9676bd1f2e369fe350ca8\",\n    \"0x291fe3120e5ff83cc98db179ecf6a83e7b72e4ce7c100590d86ad182af089fb1\",\n    \"0x1e528865c7fba552e8c72a9c367d733f11356cc4699b24e9c7bc6fc08cd46ee8\",\n    \"0xcc86473587a4563b72566a0dae80d3947a3d1d1cd3b9644e109de0eb7196c111\",\n    \"0x69f35f9b4da169b9e31ad2ae29b1ff1f73fa75166492110c7f482bb206b4a1f8\",\n    \"0xdbdad8fbff5d079f2074ee2e1523307193eac8c9881f43d03e2a53a161ee5e05\",\n    \"0x3cf99ec15eda79dd7549d3943f02f3009c925759cadeffe8e468d3e33814b3fb\",\n    \"0xd2464b8a790a09509f548d5252e7dfe2b998a5cf2f21594f0dad548f45b3bb93\",\n    \"0x934d78c055ae28bdd4eee5d8de9cea67e2b43c8cb613fcf9af3427f47dca1690\",\n    \"0x5f11742be0460aeb33b86fe351c958d5e4873e9adec0e8930933ef6ea65ae4a9\",\n    \"0x1fad49fe3e1d6288d471733f3f2f0c58f28be1f8c44b17c8ed065a036be84901\",\n    \"0x041a56e18c715f60317fb50de017d7c5ecc4a175e9109afa0bd244021a414721\",\n    \"0x1b27e26034ebfda85d38853cab4906901f7d3fecb7a4f198fdeabef415ee3712\",\n    \"0xd1ad7b3845db7e26b54931e86ba427417e8a710240e55a8ac22651e45042c296\",\n    \"0x623ab740f2d5c0107539906198a657e81df354ab5f17b5c090828e79ad623d32\",\n    \"0x282eaa230c6235569ba5d30227c7d1f316aa73aab09eb6887bc153bd5a46ad7d\",\n    \"0xe467d0eeb00a4a2d8bcf933cda5fb421ff357d19726ae10fcddf2e8c01f551bb\",\n    \"0xd736e10c57802d1b055dd6f55c226045bca93eb4726477343ea711cab2f4e17a\",\n    \"0xfb047d5248aba7835f15a2ced005ca96dea72ee91943f7b27db73d4b51f14f0e\",\n    \"0xa72cf58338c3afb0deb95ac2398c49a1c0b19463a47f215267ccb0f118b2a316\",\n    \"0x8a69af3fb99a733a7b76e0f4478f7560d2761f1c105af582894186da87a8a728\",\n    \"0xe8715a83ea01a2cbbb8bc1176d53095579b00be2969ffd7d1b2710791adc3c63\",\n    \"0xecba865a4679d89c690481d02a0609c702e5963a05c81abc46d3a2c8746a925d\",\n    \"0x2b8031436daeba5f1ed06979224ae5e398552c8445b720b9ef8c2c2b19a3bed1\",\n    \"0x9a9d7cf1c9741a636bdcb73485eec309db10443e656ef2810b1f9ed896d9f4b8\",\n    \"0x7a69e55b31452fbdc01e90abc0cd278eaaed2c136777ae3fd8945e59e1ba4a30\",\n    \"0x1bee29230bf5de52a6f4b4372eed8e22962a39cd8ac1f61881586640bea4b130\",\n    \"0x11ab3206b8662721ec59f28a050be0173e7a6abb0e72495690a5ae54a4851440\",\n    \"0xae807b59a3c6ba097d393fb0d6953855639b73c21e4704e6344d0249e537d669\",\n    \"0x92b28691018b6caaee2203d20fc239233a9cf0821d45880fa008c236ea921e1a\",\n    \"0x578daeb37ab75895ff6cd43b4df6ed0bf7362f353341281e660d21eca23333ad\",\n    \"0x4164e4dd98e7607be03e82f84eacdaf89acfc4a746bf864da083d4af2a03a250\",\n    \"0x8b869955d3f203621411903de565e056b6a04651c7bb6d896b200b310adb5f19\",\n    \"0x5846554a40023612a62d8d9fa018335be37dd4f53982789ff11779799d1cec8b\",\n    \"0xe4e9b8c9034d24155cde4f70126c188bdc1e36b287d647d621ccca667f1c50d1\",\n    \"0xc07dfe841808ece7df2fe1735ee52ea0dcc1cc1db74eaad1c0a62e5e07a447bf\",\n    \"0x0c8579740bd6cf88268c5916a237e315c1c45c46ccd15f51f720ebd56c4238a3\",\n    \"0x29f87f0db73d75679fd48db72ba52609ddec40997dd79cc24641489a05765b75\",\n    \"0x60e1742cbaf3fe1cab1942e6c10d5526ed0af91b9be66d627d1c92de12dd0aae\",\n    \"0xf55b0a05d6b77962cce52a01387e7fdcc2ba5b9240aa7d5e00010503014db2a1\",\n    \"0x32b5f4cd0f3f56eb14ab537e55e3f49dfda0dd01fd30137b67cfef4aca57e7ac\",\n    \"0x50dde4f17f0c08e1369c67f05e8b23b4dccfea9645877d8dfd1de68416787cd5\",\n    \"0xe650e48de023d41e7eb59d6cab128ee91e59de49044d7093523731293930697c\",\n    \"0x13b34eaab296a8a548a536ba811ee3f48951b39883e7fb4c59ed460894027bb4\",\n    \"0xea0b37e56ae04423b858076ec6f7d8f47115e20f9fc10803bb9ab4cce2818e05\",\n    \"0xc0ec34d5f0d97d332907a870ba8cb09fa83966a108a2028be05c7c8143dc10ae\",\n    \"0xcbbf00991d377f3db1448b1ee88fd9a6a06208ea82328df0199043bf30a0df0c\",\n    \"0x6e1995a7010a0353e2285bcd73b74e130e4e1d7b8a3d8934882f56805058dc72\",\n    \"0xe18e54753d393ca7bf5538ea458b568811bdc7f2a7c1cb1d69824b852e9a8d06\",\n    \"0x00fcbeb8b20c14123d9ece8dade359511a99853582ccf98e0a2ff57e2a77b511\",\n    \"0x3e05ee7f5f06c87cbbf4da321b4bd07b853eb24faf737c5c100149df5c5c1987\",\n    \"0xf53bb7ec98d40f22b8e61496a3ca114e81ddc52a9e6a6a20c7086749476a3b7b\",\n    \"0x9b9271e5082315cdb3f8ab02a8676978dcd4991a8c70a1f91d1ee44e404c06ff\",\n    \"0x0a64336b875160a2fbc65ee23c060ffdc92f013c792d60a81b7850d67641fef6\",\n    \"0x29ee815d109721a7df3adb6a4ffa956f87bd7b911aaaa2537b77e60b18a2da5f\",\n    \"0x46efa5afccd1418cbdf76f7bc276ae010a3fa0bd4b75318ea89800a442291a1f\",\n    \"0x4a4f078f3cd5ba76b96aa678ca2ae0a27dc0db15ba3e2d61052a743c2feac05e\",\n    \"0x571047114cde82310765b1593676779b450d8b7efd2e297b416698af4eb7910d\",\n    \"0xa9760a54119e4682259b6abc725f29ac059787c5e2403236dde295d6ddd2f7e7\",\n    \"0x7eaba440fbde42254377e44a00619d9b46fceb35a59ca8af84ea08b4a12f6c72\",\n    \"0x5738677debc4a53bcb6750a8f9bb2f8956ebe43b2e8387042e3a4e8653e66750\",\n    \"0x4dcc57f77354b6781955c326dc2d6489bd6c351936ba35fae47b9ab1fc79fcff\",\n    \"0x585c17fcac1ddfeccf3e2eb679d6cbdf2ba8d44d612d6a47dddb87ce4ee11ccd\",\n    \"0x7c2b6168dbb7f8cba2c2c0f8950fa3897afc841c2d9a9f7d796ae65c1e90413d\",\n    \"0x08cf46d977f79efac944bb66ab7ceb9d9155008692beb619c890ede485f972f8\",\n    \"0xa83f2af6eb8090a2e6da00dc6aa8e6a837beabbf0075c8ad0ff581419c05a50f\",\n    \"0x673fb2b6c45df37d51fa570093689afcc2ca8ada534eb7379a02c5357175e250\",\n    \"0xb81e7492946efe4f3e5556aa89aa3062df042898c129cc8c46df3f64ad5e6727\",\n    \"0x49b957850b35ed6ef9c3ca415e773463decffadeab9b054c342e5a67c83e4600\",\n    \"0x8daba9d37f0233387394f5f062a687e15032b67a4fc0a65e1f88f56bc88356bc\",\n    \"0x9c87e34fb6526603789e9e530fe6829b200c6d9a7f54bb669ada539abe7d88a9\",\n    \"0x429b6a5d4e59ad3a1e598022c167c91253fb5e0d00e8ec861cdae93103d054fd\",\n    \"0x04f716581fd0f90f0d01001685b29a86a4021a2055992aebb0f56d5617a8c662\",\n    \"0xd9000747f7477628a9aee506618fa7e502a1e516cb6fcef73ee96a00b147814d\",\n    \"0xc200260895a76f9b075ed3eb6561d6a2fd907de3656835f7d513f9c2dbcaf9e3\",\n    \"0x951680ed9b6cf987719cd6fd0887556ea194c8eb675cd6f933970081fa3e85d3\",\n    \"0xcb3f5dd51fcb02a013c95205e10e06d8365c5b032b10ef98123fca5cfe3f0dd3\",\n    \"0x3357d6ab76d8ea4d849923c98c3d4d92a2369fc5d65d4c3d8334bb3a09311fd3\",\n    \"0x75d3f6f976eb4a1c5be1f1e0258940006c972d70438d78543103f8eef8327a33\",\n    \"0x7a0a5feaa8fac60f8a78eab7533e4653a48d208d98676df6ea75716aaa77a1f2\",\n    \"0xf33551a61483e84229b3c7fff8068b671997956a3eccd70e2fc56da8a2fb4073\",\n    \"0x8edb10fe5b366e310ab9d0e72adb042043ac97520aaf8397815bad1657e4b05c\",\n    \"0xb73fef84ff48dc415480e5a32e03e7e0441506378c46eb5c010dfcfffbc2b703\",\n    \"0x048c3d699d6912891268858435e636314c2799c74570a77231c6ecf5d46ddea4\",\n    \"0x157fbb00cbc752cc4f6f5ba4f0ce9f2206984692e35986f48557540309db599f\",\n    \"0x1db792f73e45008c68f030180dc3b8b24f21b961198da3986d5de157301bd517\",\n    \"0xe7186d03e6cf0e10f97996a213c6ec5f93d3a1af086fb101e01d1f8eb815314d\",\n    \"0x7ba84e91c347dd9edd85d16372e81994c53a6a5220ca938b8579c89c41d9bdac\",\n    \"0x4e9a56ef129d116018a2117aa371bafeedbf418f40cc7f2faa05e86304abb62a\",\n    \"0xf3a456b973466176c65081a5cb460c78938a31cdd889457618a2888c82d1d620\",\n    \"0xdf41baeb227a570a9c2f83dcaeaf2a8aea123fdf3b4ceb0927a4026bddfebf6d\",\n    \"0x93f3cfb223ea8c963676328f69c5254c53024dea72203ae5ec93419a62689882\",\n    \"0xc89a033c813c3a2fcec2e102b678312070c8d04ffb6d633b9dc73a1b0bd9e5ad\",\n    \"0x2e81430143cb248374080b765c1f6f3b1ebc0a1af97fa3c8f1b0b4dd5a70ccbe\",\n    \"0x75a34190b74690cc0177443385da4d02b58aa988015ce357dd28788e3e834f5a\",\n    \"0xc64e1cd2cede8636022fdc5573347cf9dd6ededcbbd8d64ff724d34d0aae5f93\",\n    \"0x2ad2ebcaf9586d3ab1a9ffafec901a61685c5094385e19a9edbbdcea94764115\",\n    \"0xc6c63646a0322de8992e2301e0b2db8afb987db0e5a55385bbcef7be263ae837\",\n    \"0x95e24a3aafc39e068ec5b8d1dd19677ae552bd129eb21bc76d84ae95bca69212\",\n    \"0xa05594a9246eb1764c278b288f3f0a8dddc0679d20e8db3787610619a81cfced\",\n    \"0x44e2f7b6794f52eedc506554598e76e2d76d20cb954cb90da5b95e290c077949\",\n    \"0xa20ce0cb56ffb9543a0d9e9f378a7abb9b7073546b8dd1735f850df257b12ee0\",\n    \"0x5e72a468998329340ccf167678dd091110e999fbbfbdb24426d2629ab7506793\",\n    \"0xe7bec28f71e2cca15cccd1fb441f520b25201bb068bd308e7019e1242d2c14d5\",\n    \"0xcc9b471bbfe743759277074aee65de5c57b884b3b5aa86445bd6c6b5e6c6b5bf\",\n    \"0x956c0ef68942d18f4c8cdda57a8e6c46b7b85fb6cc91446fea64a805dbe96f1e\",\n    \"0x2c336748c61a5486d7ac7b7a1e82cea4d86c1acd9d6f4f419f3f548e143cc75f\",\n    \"0x991f2815a065aa61f6c6a8e898be62b9f80e8093367fd24bd72d38a9a604dd1c\",\n    \"0xe68752e991cefda265ea43e713b427eaff6bec6a847477abd6237084c4a771dc\",\n    \"0x2841c7794000f7e5f0a547de676a636735cbcf18288d83afa0ecfbe3a13ecc6c\",\n    \"0xf4f97c561b72c688f1e58b9ecdbdbc25c160026ccacca83be0d6d63596dacb1d\",\n    \"0x787887b04a50efe98cf2e0d5c6e94050ccf2511bce9fedecf88c9fcf116ec87c\",\n    \"0x93f088bbf76a2cd98b1681dc2034607e8dae971111b313cf1333f1f6efb5f70c\",\n    \"0x90cc5fc4e659f6a6363cc918a0cec9289ac463f25d1220aeaab423368b774394\",\n    \"0x8b08d7a35b43245a6f05bd659f36a92fa615fdef4796fb25622a6282fcaf16e5\",\n    \"0x9a418a74c02e7a2694bf5fb2f99e8e7cb581bba7ed08ec67b5a0f8f8354d9c70\",\n    \"0x0b2e9e74350e679b1c952475481065dbc88926ebc8a945cfeaa01a0ba5d40ccc\",\n    \"0x7b5a8d00bf21082ee5ffb818da679332b1d53b913be92389b29ac3b953129148\",\n    \"0x34d0f008a29d97cd90f64148158f280ebc92f971171e3cee0319ca557aa3cbd0\",\n    \"0x283f6dbc10fce829a382211205d4276310af0b7b636cfe32ce92f60ae1cc39ca\",\n    \"0x9281d8b3a8b8b46552d8433231cc3387b834b39b6ff7ef116d08d9834c45dd78\",\n    \"0x5ce0cf1d2249fb6883f73c005fae2a065dda948d8406826c6eeb03847d33ed5f\",\n    \"0x65722fdb98d11b7905d60d42de699d62e36720c6505fa076c080e4e6d2277dd6\",\n    \"0xa43b0c2d897261a11a8565402ae44929fe082faf4c31215f55a5b20c6d440844\",\n    \"0xe8108203a0c84ac8e01babf0aadb6f9c2ec7e5ff0aa10f986096269bbb87edf9\",\n    \"0x8027b823d432d1323151c97a76d02ad1cc6dfff9a5ce96087cee77e9e03fc8fc\",\n    \"0xf4124ab1fbacdeced58dd4939f6504b16600a1f2d2f577773bf1d58a80f74b69\",\n    \"0x962367d819f77fddb01e711636fe95ec3280efd7f64ed2fcbb647feaa0756e74\",\n    \"0xb1a8bb2d5a2f5f85b3e5331358b97b19c3aac4d35d42eb3723f5a468e43c4636\",\n    \"0x49a1c5df445c0fa836c47b29710ea608aa279f003d9323c658ddc30218b4164c\",\n    \"0x6078bc80a2a1ea54dfbf9287c1f78efd674f25d0b264b2d9e3d4c564728ad3f5\",\n    \"0x98f5b763a77f6d7f43f7fef4658c5281c3d1e155458b093ddce96b4c587950e0\",\n    \"0xabab4ba7a8316aacd98b4335d26174ea705ea0fcf46f5a210f6e24aa8454c21b\",\n    \"0x26dd6febc208a5b15feca2a901471ccb4797e01166c505a50db16eeaf93cce93\",\n    \"0xc8bad6f59cf2e2a8604ded64efe472a04fcbcf1ec46cb907a693769e172994c9\",\n    \"0x5c7e67a576420a6d9f229ac06d70f47ad99b1a251370e0e33f93ce0ca32cbb58\",\n    \"0x87e799ccc0aae0e5e823d635249a3f774b516262843375b6066e360fffc38bed\",\n    \"0xd997e2b1f61a0baa50fb9ec048c32d12531b8b2c59f3d0e7086bcacbda19d3e1\",\n    \"0xea919b17d605e71e068821527afcfea9d53f6ccf327b39f846461956bd10fbf2\",\n    \"0x8f88a5e3e6ecf4ddca2bba9ab6b8205aaf536151877ab2ca83a46ac650de4b48\",\n    \"0xf76c48d3f59cdebcbbc83d188a6ee661eff6cceee1725201b7e9d1b440b02952\",\n    \"0xb8f5c8d28c2cf2798ccc0d1bbb16ad4cb0e0986d3661fcd601221238e275f81a\",\n    \"0x9c32a68dbddaa93dde1673a0f1047e0bb08e1e00ea445cd24940248b1b764161\",\n    \"0x7af301963b724f2fe43c45651274cb8db3a0e880ba13a68c9a13d53531eb9379\",\n    \"0x5b4fe10ba38cff533783fd3e7565536bbdf1c415948f9f0116db3a9111adf444\",\n    \"0xff2b41406d57f74829d3815b9e63b85422710811de07226ed297316bd0820521\",\n    \"0x61df21d06eef52d320b2b85f2f995645bbc6e3a942be4d41b70e72171300eaea\",\n    \"0xa08297c587e0f6660eb4dd4c76e1da202787e647de73517baaf092c95f291dd4\",\n    \"0x7e44d3ba75802b9ab9359c6e89677ad0970a29b7068667ca7053eff1934afed8\",\n    \"0xf2c525866cf70de22b8854dd673eb3b40e598f94f50bce9d386aba62152b9ba0\",\n    \"0xfbd5731f8d054f8edeadc65f2ae67bdb1fb5075ba5982e5e67a4ff0a470d035c\",\n    \"0xbe7784aff91b6551d39a31f2ef01cd1edf71d6d45ff9ea0f44c5b941d6a67859\",\n    \"0x087b6135f76e53d53675d2d094804fa45d681161cd3b529794486e6e19950607\",\n    \"0xe8feacd2a7345f153ffbc899e1a6cc691ddfbcbc11b6ecd96cda48e19a6e9fdc\",\n    \"0xfaca4a8a224a760f6f4f3656cfe54f71204d5fe65225362b1550528b999f6a8e\",\n    \"0x3081fecb7b5ffda0f8a854e4cf042be52fc66b395a11f1f8df9bbeea6ec9187f\",\n    \"0x8cc41a727de5d55a442d4effb91ad33eb736dfe05a6b29a299833b8bf7f839ee\",\n    \"0xa55db6ff231e9ac132f61b00756aa13f9003c3ca77a459a17c5ec91708246411\",\n    \"0x3e5024b2b859187268531b1a10ca34a4a68c081351eed89bb8b6c603b76344ce\",\n    \"0xce6083ca7df4c68524f10001f539b44047cce61bf39749ce829503edd43a92b5\",\n    \"0x3af570fbeaa95a27d325b6fd452f1b3158f6c97542c80b9400584b5fbcc4de82\",\n    \"0xa939a5231b499ba74bb95155ca1664c4f72ec9500694a9f47c768c854ccb0b25\",\n    \"0xe7fb34982af2addb9b0f785466318b7e6d061d098ee8bbc5300e87fd1a2c7d1e\",\n    \"0x2aaa61a941c30f9f285d240cd9da367a0ea45e86e49f3d5fdde70442874e01f4\",\n    \"0xf3ef0de6b4dd069cadf2a707518d8b7f8da2aebede5397c7cdf01e2007d4e487\",\n    \"0x5a2f4f4228ce945fd981b0e07e288c185e09f487bccf61692ba8a0764f7310c6\",\n    \"0x23772b3302719b3389851117af55bdb06c5a08f8db542c62e6c5efe435e82088\",\n    \"0xc2b4e373920ec5113a4f8b71b6abb3233e47bec749e7ee3d2f4411d14bf1a213\",\n    \"0xebecb98b217ac89c17cbfc5155b93bbf159e78539d6b39dbd8d100b0a5f3024e\",\n    \"0x78dda64e71a97a13807e2266b358713c7e0c80621c085d31645d0eea56ce965b\",\n    \"0xaaa451ab163ad62f6c6129b5ea2f913985eedf00256a9c687dbe4bb381423a30\",\n    \"0x35cd857f9695b52db69d1554672603268e55f5d592e29e6fb4f3ccfacd5c61b8\",\n    \"0x4b2a27691f4d11cae47e66f891b1b28f7894044da42a993ec140735f21746f38\",\n    \"0x6b9f25263c11ab0eaa445dc6c2708cb83bc3e2f6b80008db0471e007322b7590\",\n    \"0x46c9254d927d6c828aa786dbce4fa3d6f751238d45d5b53d42f497505221f712\",\n    \"0xde7b815528c67612d4f3284f600955b8fb6e6e2ee5abf8af3e601ea97a2297dc\",\n    \"0xa2bcdc4cd3dee376b821163640c852852c48fee63820f9b676fb6675199496ae\",\n    \"0x800f2c5335d8a22ba06f90e20ab9b3ca0bf8698beb81af3294a0765b73975386\",\n    \"0xd609b9687eba7de0357eb2c70cbae971ce3ffe4967f86b7c51416de440019b70\",\n    \"0x422a7df59a60d2efad34217cd502b1931390306daab5d0b03f712085e3d7cb7b\",\n    \"0x47668b41f84a83ed686902666d627642c324e69c47297902217e61d99fab89b1\",\n    \"0x1cf20b8ba6315869e50ca60e4d7000d23872c0f48268ef8dd4fb5ee2d815486e\",\n    \"0x5ce4dfdda5c6cc850e616aa9b088e56b0d2ecc9a4f7d34558760960791bc1f21\",\n    \"0xd98c0920dec09c3e4075fe853e9ce1f91e16f0f4aa47de500954ff69057516c0\",\n    \"0x753a1e1e0ddc4edd4b1132a0d8a0770e689336e1addcc3f0bb8978a5b8bf560c\",\n    \"0x10fe0965631f5d29a610d1f1528583cab2575ca38d6eb993ed5cc151339eea7f\",\n    \"0xf8d46a54c74a45bc31f5aadeac9cc461a917d076ee2886e2d0240a780c24bacc\",\n    \"0x362ac069a1ae98b2754b3d9275591f5f2729ad9f2dc80e5bcb2426754485af24\",\n    \"0x28254ac840576659932ee2c65ec533fd8de5ab20c829be041f3cb0fa46841368\",\n    \"0x65c1ac95454f9ef9dcf5ff4000bafb13f5797e23dd478e4a1df3e7e92c6f949f\",\n    \"0x8cabc98f3ada785c70316c74410b13d57a8346ff41f2924453dae7f6a6a87dd0\",\n    \"0x8f31cbec4c6dc47ca9e23eb2cc7f1cdc7b4daa2a19223896f4f499a08a1e596e\",\n    \"0x3b62bf0ac46b5d3ac1bb3dede93b8387d6fb02240dc014ae3305e692b684b3bf\",\n    \"0xae32e1d5196662428b2cf5b715f4725487816f9bb99712f0edfc1db968a83f7e\",\n    \"0xae45fae68a64dcf8b2f1db48ef48efb0ae65679065a141de8c6f171d7bd25acd\",\n    \"0x2b34ee9642eea5a6449a5acfcd950b65d2e9bfe61333096ac9355b4a96c74ec0\",\n    \"0xa97b757963a4c0d88b09cc56a44b021736664ab7fef209b6469588935eecd46b\",\n    \"0xb0d28ba63c246bf42f456212d08f04d0a909f07428311ac0f102f0794bd40726\",\n    \"0x6dfd75c4272af52b0bfce3e5165f7a0601561b0b928a09bcb63af0fb0190b049\",\n    \"0x5b87f5555bbbc3e40b1ac2adb5e7c3e88f2760d5336539550bd30a38e2d114a3\",\n    \"0x3e129ced943d3efb9bc0c1071efdf0689ed5a749041787f18e3c89fc54db49e3\",\n    \"0xcc25119eb7a7d3f3f5eb774ef18f8bc603ea663ad237ad74f5856283cc20dacd\",\n    \"0x240dce9817594e2f97ad92c1f29d76f658e79863a476b371856eed0f0026dcfe\",\n    \"0xda7bdb1d7cd5d7da877f35f7c96a106831dcf00674c46b7955df449c86ce1e4f\",\n    \"0xb58e6507bd3f13c09db778d5ad2ae7deeadbf265dddef7e943d886c2b0407387\",\n    \"0xc70f40f795f4cc4a0ffb958050c8893072c161bc4c7246d8284fe4841cf11516\",\n    \"0x589e4fa7ef203323a8f16aa9fb396d14582ba9836e0d84da3d050d73aae5ecc8\",\n    \"0x20418b410e224491cee35556bc0d4b8d90080587c217aa1a02b15a1f934fb11e\",\n    \"0xfd9eb6f84b2f0bab30131759ede28ddc251cdf3a915f00e0f5dda83af475acb4\",\n    \"0x405b9f5376e937cc59a00889957a9a21ea73a46a6d33b58084d1ce49100a75ec\",\n    \"0x01c6dbdee16a50c52b47200a1a495bcab750fe37f39fdc4116c4dd3b1dff17ff\",\n    \"0xa21daf76a7ecf9316c584890d2433c021efbd4377a30d1a864c860b21afcb95a\",\n    \"0x816d907a244d2a112c44594fa8eb7e3fb9e6cf09cc6fd51012cdad48d50d105a\",\n    \"0x1a966a7925d17b04285c73a9792dafda8e80efff72b357435adfb4ea6edfaeaa\",\n    \"0x0bcac784a8e565a2611f3701c8df90a20e9dfb790149dce51f1ed2d3043eb031\",\n    \"0x1136ba3c0e8d8d5fe4d691fb3196592f1a29b84267d88314bb47d9fcdfe58ce8\",\n    \"0xae70fc96f38bac19315fddd324af3a9d0f6ef54a982a0ac30fa4f7fdbb3acb39\",\n    \"0x99ee71910316218bf71da034a8b5514a0f044a1301bcf6489152ca14e3c76a80\",\n    \"0x1999e22a653696a5960dbf5d391c2a5dce0332e8dd6234a3ff4ac9f82b448335\",\n    \"0x8189d2bacf63420c5e826d6d90fc3a24f7dffcb9e316d2086cdb1669c3b690ec\",\n    \"0x457aa0b181f3d1e3000dd243d6c97ef680eb7c49e0b778980288c3d9dab62f69\",\n    \"0x75bd4d58ed3dc8dbb093c5bc97eb0f20cc4e5f46587ef63d777d0540693001c1\",\n    \"0x4b20911277ecaf362088b6d7c17bd144e175936dbc5439fce302293cfb850ad6\",\n    \"0xf17170c3f73f45b5e785a66e5ae83ecdd7dbe08934f1a1659c9a175be72e2489\",\n    \"0x5ad33578c72aafff38005ccdfeb43c7751ed00e78ce3d09f276028126e5708ef\",\n    \"0x85ee4386fe01415ca5e9b795a6f6ab601a601eb04fa51f49be6abe70b3a63c0b\"\n  ]\n}"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "{\n  \"_type\": \"Block\",\n  \"baseFeePerGas\": \"651946141\",\n  \"difficulty\": \"0\",\n  \"extraData\": \"0x546974616e2028746974616e6275696c6465722e78797a29\",\n  \"gasLimit\": \"45000000\",\n  \"gasUsed\": \"23591997\",\n  \"blobGasUsed\": \"393216\",\n  \"excessBlobGas\": \"0\",\n  \"hash\": \"0x51ca7c34cd881563cb5565364cfe549f2e61ad41e56e29b2c0738d7ce6f58428\",\n  \"miner\": \"0x4838B106FCe9647Bdf1E7877BF73cE8B0BAD5f97\",\n  \"prevRandao\": \"0x50cfa5424e8c18e60d5acd28604feeaaccf5dc496be2f44b09a9710c24714c0d\",\n  \"nonce\": \"0x0000000000000000\",\n  \"number\": 23234704,\n  \"parentHash\": \"0x509cd46c747f174ffa941113bf21934ebb3f0ac89507ceaa06c11c0432cd1dd8\",\n  \"timestamp\": 1756324823,\n  \"parentBeaconBlockRoot\": \"0x28bdaaffcfcabd0c4d609e9405f4aeb6f716c6938d5bbee831b3a3930d1c41e3\",\n  \"stateRoot\": \"0xd5f61c124a1d3e61edea5e987720011240147172e6d1d0ad618c6c6ccc84db07\",\n  \"receiptsRoot\": \"0xb264272294a512c5719e801b19eed02546ab95c48a18648a01e2bbd7bda1fec9\",\n  \"transactions\": [\n    \"0x8d6c7f03a97c3f0fcebd6b986d163850599abcc37510504c97b259059e5a42d5\",\n    \"0xd78c5f5772596418bc4018d88fd3b156f21a7a7a3b889e7eaaf302c8858d93f6\",\n    \"0x401ec97f0b30871ba41452283c718452109a4ee972e6d37a8b803ef54f22796b\",\n    \"0xd59bdeabc3ce0d90e68666f5967814b29179b0f054dc0adf8d87cf2e16725c9b\",\n    \"0xa942c12d40aa4a1292c17baace5b2007974f67095ba54ba7643420ffdaef1570\",\n    \"0xcdb8fa105ccbcec82f704063da93c404e0f9929f17edd7151675d6c460edfaf2\",\n    \"0xf83411f86f39cbfa004a098617812564b1b4f382416c7ab56455e45f5fd5535a\",\n    \"0x42479d6380f63a6ca879d19ca2d88221ac4a467b29e1b0b766e15a8417a69d6a\",\n    \"0x6c940a09351a9bbeccede7efd50138da51416016e9e001322ad89da26e208c8c\",\n    \"0x9335c8a4ce46b5da196f31fb22b79043f143fdb01d59837d92ff66ee20f58b8c\",\n    \"0x465cd04b20a866625fabfa7aeafad692babab36166e2acdf1870d574b2261e56\",\n    \"0x1ab8346d45313d09409c88fb8a5666d9655958fbf7d0d08958fcf388e187a19e\",\n    \"0x0c568bbf6a2b65d07fa61d104c797f43f953eb7b555a5990a0a14090ecce275c\",\n    \"0xc67bfab5898f42b6f160b1174c4d21cd3ddf0ae5f682099bced4cad38fd3c9e7\",\n    \"0x3efa50fba3617ee0a292299802830a3e49e23266486649295667d3612c350a38\",\n    \"0x4862f47d8a722c7e6e6fc0c5fbb05555e01163cb696b62a05bb475db26cc8107\",\n    \"0x165fd3e016b25542c98c428484915d0bed61384452b9ad296bc0a4462d74b24a\",\n    \"0xde132f193939a236ada7785347ecb80f05834f60d9bfaffde58d0e0c2dd250f3\",\n    \"0x34204ad54d35ab9965b2cc9066f95a8c167344b6815349eb926dcb0762c9819a\",\n    \"0x45763f3fb16a55f2ee037986ba8e0f62d9b9b54b97c2287ce9bc6e1044670ba6\",\n    \"0xbcbafdc76249c3a3c432b6568aa006c2d692d026c0e7caf80fd103ec5a64c376\",\n    \"0xf10a4a8557c5afce9b38cdca5da048e7effbad61e46ff008542338ae6747ae1d\",\n    \"0x2a46d56ff5fad9d831e7ef7851cbd4e2f9a2f5f1b41bea10dff9821bfd6ff497\",\n    \"0xb929be21dcd4fcffe1370961cb8f353add3091eef78d5e1655c34c427da7fe7f\",\n    \"0xaf01d4dc70f01b41998cc73d07eec10f4c77d3114c59c2d774ec19c2f00a8839\",\n    \"0x970e3897db14f5e6d7bb7393ee655313ae009f7c769ff7ffebbd352766626922\",\n    \"0xe897f9f759e080c428db500993b1add08c1ad675cafac4e48ca15939006cd3f8\",\n    \"0x390af942d7f9da58115e528b7a19cbc6b18ef27e6b62c67c28e6eee07b049842\",\n    \"0x717aef00049158e4823ee1bc39b56f26a093b6179c9ca2311aab32a37d8ac763\",\n    \"0x47c8996bb242e640da25213d9a2d18d61d58e6762b344f52cd4fab1d6b034d3d\",\n    \"0x975ffa606becc1dd6d09502004603c6126129d4ed854ab3a4a620a351b7a430f\",\n    \"0x2268e1da47a2e43eb02a60870aaad014291dcd33202487df04c3c469d5d29209\",\n    \"0x85f2d8ec8ad5ef5f684c6cfcd3610e6791f783da5c647ce24fcc4a0dac888e12\",\n    \"0x195766e68230e398d0523a884d9804b18a49f9b2bec9676bd1f2e369fe350ca8\",\n    \"0x291fe3120e5ff83cc98db179ecf6a83e7b72e4ce7c100590d86ad182af089fb1\",\n    \"0x1e528865c7fba552e8c72a9c367d733f11356cc4699b24e9c7bc6fc08cd46ee8\",\n    \"0xcc86473587a4563b72566a0dae80d3947a3d1d1cd3b9644e109de0eb7196c111\",\n    \"0x69f35f9b4da169b9e31ad2ae29b1ff1f73fa75166492110c7f482bb206b4a1f8\",\n    \"0xdbdad8fbff5d079f2074ee2e1523307193eac8c9881f43d03e2a53a161ee5e05\",\n    \"0x3cf99ec15eda79dd7549d3943f02f3009c925759cadeffe8e468d3e33814b3fb\",\n    \"0xd2464b8a790a09509f548d5252e7dfe2b998a5cf2f21594f0dad548f45b3bb93\",\n    \"0x934d78c055ae28bdd4eee5d8de9cea67e2b43c8cb613fcf9af3427f47dca1690\",\n    \"0x5f11742be0460aeb33b86fe351c958d5e4873e9adec0e8930933ef6ea65ae4a9\",\n    \"0x1fad49fe3e1d6288d471733f3f2f0c58f28be1f8c44b17c8ed065a036be84901\",\n    \"0x041a56e18c715f60317fb50de017d7c5ecc4a175e9109afa0bd244021a414721\",\n    \"0x1b27e26034ebfda85d38853cab4906901f7d3fecb7a4f198fdeabef415ee3712\",\n    \"0xd1ad7b3845db7e26b54931e86ba427417e8a710240e55a8ac22651e45042c296\",\n    \"0x623ab740f2d5c0107539906198a657e81df354ab5f17b5c090828e79ad623d32\",\n    \"0x282eaa230c6235569ba5d30227c7d1f316aa73aab09eb6887bc153bd5a46ad7d\",\n    \"0xe467d0eeb00a4a2d8bcf933cda5fb421ff357d19726ae10fcddf2e8c01f551bb\",\n    \"0xd736e10c57802d1b055dd6f55c226045bca93eb4726477343ea711cab2f4e17a\",\n    \"0xfb047d5248aba7835f15a2ced005ca96dea72ee91943f7b27db73d4b51f14f0e\",\n    \"0xa72cf58338c3afb0deb95ac2398c49a1c0b19463a47f215267ccb0f118b2a316\",\n    \"0x8a69af3fb99a733a7b76e0f4478f7560d2761f1c105af582894186da87a8a728\",\n    \"0xe8715a83ea01a2cbbb8bc1176d53095579b00be2969ffd7d1b2710791adc3c63\",\n    \"0xecba865a4679d89c690481d02a0609c702e5963a05c81abc46d3a2c8746a925d\",\n    \"0x2b8031436daeba5f1ed06979224ae5e398552c8445b720b9ef8c2c2b19a3bed1\",\n    \"0x9a9d7cf1c9741a636bdcb73485eec309db10443e656ef2810b1f9ed896d9f4b8\",\n    \"0x7a69e55b31452fbdc01e90abc0cd278eaaed2c136777ae3fd8945e59e1ba4a30\",\n    \"0x1bee29230bf5de52a6f4b4372eed8e22962a39cd8ac1f61881586640bea4b130\",\n    \"0x11ab3206b8662721ec59f28a050be0173e7a6abb0e72495690a5ae54a4851440\",\n    \"0xae807b59a3c6ba097d393fb0d6953855639b73c21e4704e6344d0249e537d669\",\n    \"0x92b28691018b6caaee2203d20fc239233a9cf0821d45880fa008c236ea921e1a\",\n    \"0x578daeb37ab75895ff6cd43b4df6ed0bf7362f353341281e660d21eca23333ad\",\n    \"0x4164e4dd98e7607be03e82f84eacdaf89acfc4a746bf864da083d4af2a03a250\",\n    \"0x8b869955d3f203621411903de565e056b6a04651c7bb6d896b200b310adb5f19\",\n    \"0x5846554a40023612a62d8d9fa018335be37dd4f53982789ff11779799d1cec8b\",\n    \"0xe4e9b8c9034d24155cde4f70126c188bdc1e36b287d647d621ccca667f1c50d1\",\n    \"0xc07dfe841808ece7df2fe1735ee52ea0dcc1cc1db74eaad1c0a62e5e07a447bf\",\n    \"0x0c8579740bd6cf88268c5916a237e315c1c45c46ccd15f51f720ebd56c4238a3\",\n    \"0x29f87f0db73d75679fd48db72ba52609ddec40997dd79cc24641489a05765b75\",\n    \"0x60e1742cbaf3fe1cab1942e6c10d5526ed0af91b9be66d627d1c92de12dd0aae\",\n    \"0xf55b0a05d6b77962cce52a01387e7fdcc2ba5b9240aa7d5e00010503014db2a1\",\n    \"0x32b5f4cd0f3f56eb14ab537e55e3f49dfda0dd01fd30137b67cfef4aca57e7ac\",\n    \"0x50dde4f17f0c08e1369c67f05e8b23b4dccfea9645877d8dfd1de68416787cd5\",\n    \"0xe650e48de023d41e7eb59d6cab128ee91e59de49044d7093523731293930697c\",\n    \"0x13b34eaab296a8a548a536ba811ee3f48951b39883e7fb4c59ed460894027bb4\",\n    \"0xea0b37e56ae04423b858076ec6f7d8f47115e20f9fc10803bb9ab4cce2818e05\",\n    \"0xc0ec34d5f0d97d332907a870ba8cb09fa83966a108a2028be05c7c8143dc10ae\",\n    \"0xcbbf00991d377f3db1448b1ee88fd9a6a06208ea82328df0199043bf30a0df0c\",\n    \"0x6e1995a7010a0353e2285bcd73b74e130e4e1d7b8a3d8934882f56805058dc72\",\n    \"0xe18e54753d393ca7bf5538ea458b568811bdc7f2a7c1cb1d69824b852e9a8d06\",\n    \"0x00fcbeb8b20c14123d9ece8dade359511a99853582ccf98e0a2ff57e2a77b511\",\n    \"0x3e05ee7f5f06c87cbbf4da321b4bd07b853eb24faf737c5c100149df5c5c1987\",\n    \"0xf53bb7ec98d40f22b8e61496a3ca114e81ddc52a9e6a6a20c7086749476a3b7b\",\n    \"0x9b9271e5082315cdb3f8ab02a8676978dcd4991a8c70a1f91d1ee44e404c06ff\",\n    \"0x0a64336b875160a2fbc65ee23c060ffdc92f013c792d60a81b7850d67641fef6\",\n    \"0x29ee815d109721a7df3adb6a4ffa956f87bd7b911aaaa2537b77e60b18a2da5f\",\n    \"0x46efa5afccd1418cbdf76f7bc276ae010a3fa0bd4b75318ea89800a442291a1f\",\n    \"0x4a4f078f3cd5ba76b96aa678ca2ae0a27dc0db15ba3e2d61052a743c2feac05e\",\n    \"0x571047114cde82310765b1593676779b450d8b7efd2e297b416698af4eb7910d\",\n    \"0xa9760a54119e4682259b6abc725f29ac059787c5e2403236dde295d6ddd2f7e7\",\n    \"0x7eaba440fbde42254377e44a00619d9b46fceb35a59ca8af84ea08b4a12f6c72\",\n    \"0x5738677debc4a53bcb6750a8f9bb2f8956ebe43b2e8387042e3a4e8653e66750\",\n    \"0x4dcc57f77354b6781955c326dc2d6489bd6c351936ba35fae47b9ab1fc79fcff\",\n    \"0x585c17fcac1ddfeccf3e2eb679d6cbdf2ba8d44d612d6a47dddb87ce4ee11ccd\",\n    \"0x7c2b6168dbb7f8cba2c2c0f8950fa3897afc841c2d9a9f7d796ae65c1e90413d\",\n    \"0x08cf46d977f79efac944bb66ab7ceb9d9155008692beb619c890ede485f972f8\",\n    \"0xa83f2af6eb8090a2e6da00dc6aa8e6a837beabbf0075c8ad0ff581419c05a50f\",\n    \"0x673fb2b6c45df37d51fa570093689afcc2ca8ada534eb7379a02c5357175e250\",\n    \"0xb81e7492946efe4f3e5556aa89aa3062df042898c129cc8c46df3f64ad5e6727\",\n    \"0x49b957850b35ed6ef9c3ca415e773463decffadeab9b054c342e5a67c83e4600\",\n    \"0x8daba9d37f0233387394f5f062a687e15032b67a4fc0a65e1f88f56bc88356bc\",\n    \"0x9c87e34fb6526603789e9e530fe6829b200c6d9a7f54bb669ada539abe7d88a9\",\n    \"0x429b6a5d4e59ad3a1e598022c167c91253fb5e0d00e8ec861cdae93103d054fd\",\n    \"0x04f716581fd0f90f0d01001685b29a86a4021a2055992aebb0f56d5617a8c662\",\n    \"0xd9000747f7477628a9aee506618fa7e502a1e516cb6fcef73ee96a00b147814d\",\n    \"0xc200260895a76f9b075ed3eb6561d6a2fd907de3656835f7d513f9c2dbcaf9e3\",\n    \"0x951680ed9b6cf987719cd6fd0887556ea194c8eb675cd6f933970081fa3e85d3\",\n    \"0xcb3f5dd51fcb02a013c95205e10e06d8365c5b032b10ef98123fca5cfe3f0dd3\",\n    \"0x3357d6ab76d8ea4d849923c98c3d4d92a2369fc5d65d4c3d8334bb3a09311fd3\",\n    \"0x75d3f6f976eb4a1c5be1f1e0258940006c972d70438d78543103f8eef8327a33\",\n    \"0x7a0a5feaa8fac60f8a78eab7533e4653a48d208d98676df6ea75716aaa77a1f2\",\n    \"0xf33551a61483e84229b3c7fff8068b671997956a3eccd70e2fc56da8a2fb4073\",\n    \"0x8edb10fe5b366e310ab9d0e72adb042043ac97520aaf8397815bad1657e4b05c\",\n    \"0xb73fef84ff48dc415480e5a32e03e7e0441506378c46eb5c010dfcfffbc2b703\",\n    \"0x048c3d699d6912891268858435e636314c2799c74570a77231c6ecf5d46ddea4\",\n    \"0x157fbb00cbc752cc4f6f5ba4f0ce9f2206984692e35986f48557540309db599f\",\n    \"0x1db792f73e45008c68f030180dc3b8b24f21b961198da3986d5de157301bd517\",\n    \"0xe7186d03e6cf0e10f97996a213c6ec5f93d3a1af086fb101e01d1f8eb815314d\",\n    \"0x7ba84e91c347dd9edd85d16372e81994c53a6a5220ca938b8579c89c41d9bdac\",\n    \"0x4e9a56ef129d116018a2117aa371bafeedbf418f40cc7f2faa05e86304abb62a\",\n    \"0xf3a456b973466176c65081a5cb460c78938a31cdd889457618a2888c82d1d620\",\n    \"0xdf41baeb227a570a9c2f83dcaeaf2a8aea123fdf3b4ceb0927a4026bddfebf6d\",\n    \"0x93f3cfb223ea8c963676328f69c5254c53024dea72203ae5ec93419a62689882\",\n    \"0xc89a033c813c3a2fcec2e102b678312070c8d04ffb6d633b9dc73a1b0bd9e5ad\",\n    \"0x2e81430143cb248374080b765c1f6f3b1ebc0a1af97fa3c8f1b0b4dd5a70ccbe\",\n    \"0x75a34190b74690cc0177443385da4d02b58aa988015ce357dd28788e3e834f5a\",\n    \"0xc64e1cd2cede8636022fdc5573347cf9dd6ededcbbd8d64ff724d34d0aae5f93\",\n    \"0x2ad2ebcaf9586d3ab1a9ffafec901a61685c5094385e19a9edbbdcea94764115\",\n    \"0xc6c63646a0322de8992e2301e0b2db8afb987db0e5a55385bbcef7be263ae837\",\n    \"0x95e24a3aafc39e068ec5b8d1dd19677ae552bd129eb21bc76d84ae95bca69212\",\n    \"0xa05594a9246eb1764c278b288f3f0a8dddc0679d20e8db3787610619a81cfced\",\n    \"0x44e2f7b6794f52eedc506554598e76e2d76d20cb954cb90da5b95e290c077949\",\n    \"0xa20ce0cb56ffb9543a0d9e9f378a7abb9b7073546b8dd1735f850df257b12ee0\",\n    \"0x5e72a468998329340ccf167678dd091110e999fbbfbdb24426d2629ab7506793\",\n    \"0xe7bec28f71e2cca15cccd1fb441f520b25201bb068bd308e7019e1242d2c14d5\",\n    \"0xcc9b471bbfe743759277074aee65de5c57b884b3b5aa86445bd6c6b5e6c6b5bf\",\n    \"0x956c0ef68942d18f4c8cdda57a8e6c46b7b85fb6cc91446fea64a805dbe96f1e\",\n    \"0x2c336748c61a5486d7ac7b7a1e82cea4d86c1acd9d6f4f419f3f548e143cc75f\",\n    \"0x991f2815a065aa61f6c6a8e898be62b9f80e8093367fd24bd72d38a9a604dd1c\",\n    \"0xe68752e991cefda265ea43e713b427eaff6bec6a847477abd6237084c4a771dc\",\n    \"0x2841c7794000f7e5f0a547de676a636735cbcf18288d83afa0ecfbe3a13ecc6c\",\n    \"0xf4f97c561b72c688f1e58b9ecdbdbc25c160026ccacca83be0d6d63596dacb1d\",\n    \"0x787887b04a50efe98cf2e0d5c6e94050ccf2511bce9fedecf88c9fcf116ec87c\",\n    \"0x93f088bbf76a2cd98b1681dc2034607e8dae971111b313cf1333f1f6efb5f70c\",\n    \"0x90cc5fc4e659f6a6363cc918a0cec9289ac463f25d1220aeaab423368b774394\",\n    \"0x8b08d7a35b43245a6f05bd659f36a92fa615fdef4796fb25622a6282fcaf16e5\",\n    \"0x9a418a74c02e7a2694bf5fb2f99e8e7cb581bba7ed08ec67b5a0f8f8354d9c70\",\n    \"0x0b2e9e74350e679b1c952475481065dbc88926ebc8a945cfeaa01a0ba5d40ccc\",\n    \"0x7b5a8d00bf21082ee5ffb818da679332b1d53b913be92389b29ac3b953129148\",\n    \"0x34d0f008a29d97cd90f64148158f280ebc92f971171e3cee0319ca557aa3cbd0\",\n    \"0x283f6dbc10fce829a382211205d4276310af0b7b636cfe32ce92f60ae1cc39ca\",\n    \"0x9281d8b3a8b8b46552d8433231cc3387b834b39b6ff7ef116d08d9834c45dd78\",\n    \"0x5ce0cf1d2249fb6883f73c005fae2a065dda948d8406826c6eeb03847d33ed5f\",\n    \"0x65722fdb98d11b7905d60d42de699d62e36720c6505fa076c080e4e6d2277dd6\",\n    \"0xa43b0c2d897261a11a8565402ae44929fe082faf4c31215f55a5b20c6d440844\",\n    \"0xe8108203a0c84ac8e01babf0aadb6f9c2ec7e5ff0aa10f986096269bbb87edf9\",\n    \"0x8027b823d432d1323151c97a76d02ad1cc6dfff9a5ce96087cee77e9e03fc8fc\",\n    \"0xf4124ab1fbacdeced58dd4939f6504b16600a1f2d2f577773bf1d58a80f74b69\",\n    \"0x962367d819f77fddb01e711636fe95ec3280efd7f64ed2fcbb647feaa0756e74\",\n    \"0xb1a8bb2d5a2f5f85b3e5331358b97b19c3aac4d35d42eb3723f5a468e43c4636\",\n    \"0x49a1c5df445c0fa836c47b29710ea608aa279f003d9323c658ddc30218b4164c\",\n    \"0x6078bc80a2a1ea54dfbf9287c1f78efd674f25d0b264b2d9e3d4c564728ad3f5\",\n    \"0x98f5b763a77f6d7f43f7fef4658c5281c3d1e155458b093ddce96b4c587950e0\",\n    \"0xabab4ba7a8316aacd98b4335d26174ea705ea0fcf46f5a210f6e24aa8454c21b\",\n    \"0x26dd6febc208a5b15feca2a901471ccb4797e01166c505a50db16eeaf93cce93\",\n    \"0xc8bad6f59cf2e2a8604ded64efe472a04fcbcf1ec46cb907a693769e172994c9\",\n    \"0x5c7e67a576420a6d9f229ac06d70f47ad99b1a251370e0e33f93ce0ca32cbb58\",\n    \"0x87e799ccc0aae0e5e823d635249a3f774b516262843375b6066e360fffc38bed\",\n    \"0xd997e2b1f61a0baa50fb9ec048c32d12531b8b2c59f3d0e7086bcacbda19d3e1\",\n    \"0xea919b17d605e71e068821527afcfea9d53f6ccf327b39f846461956bd10fbf2\",\n    \"0x8f88a5e3e6ecf4ddca2bba9ab6b8205aaf536151877ab2ca83a46ac650de4b48\",\n    \"0xf76c48d3f59cdebcbbc83d188a6ee661eff6cceee1725201b7e9d1b440b02952\",\n    \"0xb8f5c8d28c2cf2798ccc0d1bbb16ad4cb0e0986d3661fcd601221238e275f81a\",\n    \"0x9c32a68dbddaa93dde1673a0f1047e0bb08e1e00ea445cd24940248b1b764161\",\n    \"0x7af301963b724f2fe43c45651274cb8db3a0e880ba13a68c9a13d53531eb9379\",\n    \"0x5b4fe10ba38cff533783fd3e7565536bbdf1c415948f9f0116db3a9111adf444\",\n    \"0xff2b41406d57f74829d3815b9e63b85422710811de07226ed297316bd0820521\",\n    \"0x61df21d06eef52d320b2b85f2f995645bbc6e3a942be4d41b70e72171300eaea\",\n    \"0xa08297c587e0f6660eb4dd4c76e1da202787e647de73517baaf092c95f291dd4\",\n    \"0x7e44d3ba75802b9ab9359c6e89677ad0970a29b7068667ca7053eff1934afed8\",\n    \"0xf2c525866cf70de22b8854dd673eb3b40e598f94f50bce9d386aba62152b9ba0\",\n    \"0xfbd5731f8d054f8edeadc65f2ae67bdb1fb5075ba5982e5e67a4ff0a470d035c\",\n    \"0xbe7784aff91b6551d39a31f2ef01cd1edf71d6d45ff9ea0f44c5b941d6a67859\",\n    \"0x087b6135f76e53d53675d2d094804fa45d681161cd3b529794486e6e19950607\",\n    \"0xe8feacd2a7345f153ffbc899e1a6cc691ddfbcbc11b6ecd96cda48e19a6e9fdc\",\n    \"0xfaca4a8a224a760f6f4f3656cfe54f71204d5fe65225362b1550528b999f6a8e\",\n    \"0x3081fecb7b5ffda0f8a854e4cf042be52fc66b395a11f1f8df9bbeea6ec9187f\",\n    \"0x8cc41a727de5d55a442d4effb91ad33eb736dfe05a6b29a299833b8bf7f839ee\",\n    \"0xa55db6ff231e9ac132f61b00756aa13f9003c3ca77a459a17c5ec91708246411\",\n    \"0x3e5024b2b859187268531b1a10ca34a4a68c081351eed89bb8b6c603b76344ce\",\n    \"0xce6083ca7df4c68524f10001f539b44047cce61bf39749ce829503edd43a92b5\",\n    \"0x3af570fbeaa95a27d325b6fd452f1b3158f6c97542c80b9400584b5fbcc4de82\",\n    \"0xa939a5231b499ba74bb95155ca1664c4f72ec9500694a9f47c768c854ccb0b25\",\n    \"0xe7fb34982af2addb9b0f785466318b7e6d061d098ee8bbc5300e87fd1a2c7d1e\",\n    \"0x2aaa61a941c30f9f285d240cd9da367a0ea45e86e49f3d5fdde70442874e01f4\",\n    \"0xf3ef0de6b4dd069cadf2a707518d8b7f8da2aebede5397c7cdf01e2007d4e487\",\n    \"0x5a2f4f4228ce945fd981b0e07e288c185e09f487bccf61692ba8a0764f7310c6\",\n    \"0x23772b3302719b3389851117af55bdb06c5a08f8db542c62e6c5efe435e82088\",\n    \"0xc2b4e373920ec5113a4f8b71b6abb3233e47bec749e7ee3d2f4411d14bf1a213\",\n    \"0xebecb98b217ac89c17cbfc5155b93bbf159e78539d6b39dbd8d100b0a5f3024e\",\n    \"0x78dda64e71a97a13807e2266b358713c7e0c80621c085d31645d0eea56ce965b\",\n    \"0xaaa451ab163ad62f6c6129b5ea2f913985eedf00256a9c687dbe4bb381423a30\",\n    \"0x35cd857f9695b52db69d1554672603268e55f5d592e29e6fb4f3ccfacd5c61b8\",\n    \"0x4b2a27691f4d11cae47e66f891b1b28f7894044da42a993ec140735f21746f38\",\n    \"0x6b9f25263c11ab0eaa445dc6c2708cb83bc3e2f6b80008db0471e007322b7590\",\n    \"0x46c9254d927d6c828aa786dbce4fa3d6f751238d45d5b53d42f497505221f712\",\n    \"0xde7b815528c67612d4f3284f600955b8fb6e6e2ee5abf8af3e601ea97a2297dc\",\n    \"0xa2bcdc4cd3dee376b821163640c852852c48fee63820f9b676fb6675199496ae\",\n    \"0x800f2c5335d8a22ba06f90e20ab9b3ca0bf8698beb81af3294a0765b73975386\",\n    \"0xd609b9687eba7de0357eb2c70cbae971ce3ffe4967f86b7c51416de440019b70\",\n    \"0x422a7df59a60d2efad34217cd502b1931390306daab5d0b03f712085e3d7cb7b\",\n    \"0x47668b41f84a83ed686902666d627642c324e69c47297902217e61d99fab89b1\",\n    \"0x1cf20b8ba6315869e50ca60e4d7000d23872c0f48268ef8dd4fb5ee2d815486e\",\n    \"0x5ce4dfdda5c6cc850e616aa9b088e56b0d2ecc9a4f7d34558760960791bc1f21\",\n    \"0xd98c0920dec09c3e4075fe853e9ce1f91e16f0f4aa47de500954ff69057516c0\",\n    \"0x753a1e1e0ddc4edd4b1132a0d8a0770e689336e1addcc3f0bb8978a5b8bf560c\",\n    \"0x10fe0965631f5d29a610d1f1528583cab2575ca38d6eb993ed5cc151339eea7f\",\n    \"0xf8d46a54c74a45bc31f5aadeac9cc461a917d076ee2886e2d0240a780c24bacc\",\n    \"0x362ac069a1ae98b2754b3d9275591f5f2729ad9f2dc80e5bcb2426754485af24\",\n    \"0x28254ac840576659932ee2c65ec533fd8de5ab20c829be041f3cb0fa46841368\",\n    \"0x65c1ac95454f9ef9dcf5ff4000bafb13f5797e23dd478e4a1df3e7e92c6f949f\",\n    \"0x8cabc98f3ada785c70316c74410b13d57a8346ff41f2924453dae7f6a6a87dd0\",\n    \"0x8f31cbec4c6dc47ca9e23eb2cc7f1cdc7b4daa2a19223896f4f499a08a1e596e\",\n    \"0x3b62bf0ac46b5d3ac1bb3dede93b8387d6fb02240dc014ae3305e692b684b3bf\",\n    \"0xae32e1d5196662428b2cf5b715f4725487816f9bb99712f0edfc1db968a83f7e\",\n    \"0xae45fae68a64dcf8b2f1db48ef48efb0ae65679065a141de8c6f171d7bd25acd\",\n    \"0x2b34ee9642eea5a6449a5acfcd950b65d2e9bfe61333096ac9355b4a96c74ec0\",\n    \"0xa97b757963a4c0d88b09cc56a44b021736664ab7fef209b6469588935eecd46b\",\n    \"0xb0d28ba63c246bf42f456212d08f04d0a909f07428311ac0f102f0794bd40726\",\n    \"0x6dfd75c4272af52b0bfce3e5165f7a0601561b0b928a09bcb63af0fb0190b049\",\n    \"0x5b87f5555bbbc3e40b1ac2adb5e7c3e88f2760d5336539550bd30a38e2d114a3\",\n    \"0x3e129ced943d3efb9bc0c1071efdf0689ed5a749041787f18e3c89fc54db49e3\",\n    \"0xcc25119eb7a7d3f3f5eb774ef18f8bc603ea663ad237ad74f5856283cc20dacd\",\n    \"0x240dce9817594e2f97ad92c1f29d76f658e79863a476b371856eed0f0026dcfe\",\n    \"0xda7bdb1d7cd5d7da877f35f7c96a106831dcf00674c46b7955df449c86ce1e4f\",\n    \"0xb58e6507bd3f13c09db778d5ad2ae7deeadbf265dddef7e943d886c2b0407387\",\n    \"0xc70f40f795f4cc4a0ffb958050c8893072c161bc4c7246d8284fe4841cf11516\",\n    \"0x589e4fa7ef203323a8f16aa9fb396d14582ba9836e0d84da3d050d73aae5ecc8\",\n    \"0x20418b410e224491cee35556bc0d4b8d90080587c217aa1a02b15a1f934fb11e\",\n    \"0xfd9eb6f84b2f0bab30131759ede28ddc251cdf3a915f00e0f5dda83af475acb4\",\n    \"0x405b9f5376e937cc59a00889957a9a21ea73a46a6d33b58084d1ce49100a75ec\",\n    \"0x01c6dbdee16a50c52b47200a1a495bcab750fe37f39fdc4116c4dd3b1dff17ff\",\n    \"0xa21daf76a7ecf9316c584890d2433c021efbd4377a30d1a864c860b21afcb95a\",\n    \"0x816d907a244d2a112c44594fa8eb7e3fb9e6cf09cc6fd51012cdad48d50d105a\",\n    \"0x1a966a7925d17b04285c73a9792dafda8e80efff72b357435adfb4ea6edfaeaa\",\n    \"0x0bcac784a8e565a2611f3701c8df90a20e9dfb790149dce51f1ed2d3043eb031\",\n    \"0x1136ba3c0e8d8d5fe4d691fb3196592f1a29b84267d88314bb47d9fcdfe58ce8\",\n    \"0xae70fc96f38bac19315fddd324af3a9d0f6ef54a982a0ac30fa4f7fdbb3acb39\",\n    \"0x99ee71910316218bf71da034a8b5514a0f044a1301bcf6489152ca14e3c76a80\",\n    \"0x1999e22a653696a5960dbf5d391c2a5dce0332e8dd6234a3ff4ac9f82b448335\",\n    \"0x8189d2bacf63420c5e826d6d90fc3a24f7dffcb9e316d2086cdb1669c3b690ec\",\n    \"0x457aa0b181f3d1e3000dd243d6c97ef680eb7c49e0b778980288c3d9dab62f69\",\n    \"0x75bd4d58ed3dc8dbb093c5bc97eb0f20cc4e5f46587ef63d777d0540693001c1\",\n    \"0x4b20911277ecaf362088b6d7c17bd144e175936dbc5439fce302293cfb850ad6\",\n    \"0xf17170c3f73f45b5e785a66e5ae83ecdd7dbe08934f1a1659c9a175be72e2489\",\n    \"0x5ad33578c72aafff38005ccdfeb43c7751ed00e78ce3d09f276028126e5708ef\",\n    \"0x85ee4386fe01415ca5e9b795a6f6ab601a601eb04fa51f49be6abe70b3a63c0b\"\n  ]\n}"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 508072
          },
          "timestamp": "2025-08-27T20:00:35.512Z"
        },
        {
          "params": {
            "blockTag": 18000000
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "{\n  \"_type\": \"Block\",\n  \"baseFeePerGas\": \"21721091641\",\n  \"difficulty\": \"0\",\n  \"extraData\": \"0x496c6c756d696e61746520446d6f63726174697a6520447374726962757465\",\n  \"gasLimit\": \"30000000\",\n  \"gasUsed\": \"16247211\",\n  \"blobGasUsed\": null,\n  \"excessBlobGas\": null,\n  \"hash\": \"0x95b198e154acbfc64109dfd22d8224fe927fd8dfdedfae01587674482ba4baf3\",\n  \"miner\": \"0xDAFEA492D9c6733ae3d56b7Ed1ADB60692c98Bc5\",\n  \"prevRandao\": \"0x8b14d8532c673877dcc735caf93392bd05603456b7745fc3f012a3e3b156acfa\",\n  \"nonce\": \"0x0000000000000000\",\n  \"number\": 18000000,\n  \"parentHash\": \"0x198723e0ddf20153951c6304093cbd97fd306c5db03287c5586c0430a986080d\",\n  \"timestamp\": 1693066895,\n  \"parentBeaconBlockRoot\": null,\n  \"stateRoot\": \"0x08b7443c83a93d4711f5c63e738c27c54a932522405b37b4ca7868a944105deb\",\n  \"receiptsRoot\": \"0xd925652022fa6da2ca5b9781ab2fd50cb05d3b4741a327f52322e2b7917d3a2f\",\n  \"transactions\": [\n    \"0x16e199673891df518e25db2ef5320155da82a3dd71a677e7d84363251885d133\",\n    \"0x6742cd57e6aefce4b96887bb3090371ac49414c6b45a21e43d9e41e0ea9ed5ab\",\n    \"0x4efc4b40d36b9fc30e7ca452df3b6ab896a18a68d89d0901ce56834abf78010f\",\n    \"0x5119dcc6bb07181742fd0366196021b120cc1c022c62ce3d3e272a7584fe4e2f\",\n    \"0x73ee5f2594e154c73590ba8339e69a553b14ccce29b5a976b2725885cf86e185\",\n    \"0xc6b97ff1b5f5e3c6c8265371f59685e49b19aece2ae16ccf4ecec0b92a5882bd\",\n    \"0xa60736e99248c01ba02957b84ecc01b4ebc4c22318b223702d924fbdf7e98df8\",\n    \"0xa5baf9116b0a65ea1615ba89086f19e92d0ecb2657bdab3393a527c8fb7e8dc4\",\n    \"0x1d5807ff7c727bb1a1f69b7561622118186900eb84f3fa494d17dfc8f2e2d1b0\",\n    \"0x24578bf2676fabd01269543dda61e53496a3282b1d9794ddb141319578052359\",\n    \"0xb243a19756f159a6f80a5b972596957cfbd671970ab414a7cac4f895b892dca6\",\n    \"0x8bd66e08dbe4a169dc82834cc382976ee80f39012e028195aa7f092929d96af5\",\n    \"0x840a6f565c23b7e873f970789c79ef652812d984824c65b8d05dc5f746f7c528\",\n    \"0xde0ca4c3db355459e8573d7d6f6373256ef1e883e331f3aaf9e4cb8bd668138d\",\n    \"0x6ffdaee7a47cd177c5280bb91cb2b82186c26056e7ade387a5c70b8137fd434e\",\n    \"0x014bbc84da61f449fd5a59204458e98b72cc2d616cb4cf40e721a2af83f47aee\",\n    \"0xec080b91deea33830c3e626201662243c66c1f3d10da01f32c4cb0ebf395012a\",\n    \"0x6f1a769116ce844973c85a0052ac184f34c162b6287ac0202dec6ffde30367e1\",\n    \"0xc9dcf8907764edffa1496f56831e81a33456bf505e925b05b04f1dd231548fda\",\n    \"0xd7e72a37c6f709a4f26e22d721b42ff0f1065ecd9edc60468868a7c74f521154\",\n    \"0xe70c7688bb5eba40c0da34677c19fecc9cb6ceacc3cb36c9afee9bd1b9cfe664\",\n    \"0xcff1595448f469499873536bab2987ad6c032a71ac7001eed97d1bbac244ed9e\",\n    \"0x48bb2135369bda57cdca5b7629dad74595c51a12ed7a38618db8dfca4856543f\",\n    \"0xe4f6e284ac5556727ff6be1a1fa888198d131415e596db4ed79ca9f4ef44a873\",\n    \"0xe4fa256ff9253a15735ebb89b2845d9469a57757b30dbbe340fdb73375a26f22\",\n    \"0xf5a74705de048cb35bf1b7287e4845dd2211a4c4cfbd311ab31b4b7f6832255e\",\n    \"0x9b9b3a95bb8eff0575973583fec1b8f8eb1f88c096c45b63553378cc7f82ef94\",\n    \"0x10a315bbd6c9500b24debc5882cc7d9193ed314b864e26a23a2d4d343dfdfc28\",\n    \"0x4afbb8753290b4bdabd83519f428af30ad2ff0a203351fe5056ee94aeefae5e5\",\n    \"0x3263541fe1ea0a580cbac71085c607288f86788d56987f66b0dd88ab2967c03a\",\n    \"0x47c6e9607460ea8528b6d769cca4f547e490f22e9895e28e945d60b6b43b5f52\",\n    \"0xb34464d93aa5dfeb60fd0dc4639927c2c77e69458b501859a3f0147ed47b2c3b\",\n    \"0xe808c4e337781bd24b4a83a80af05de99442f3aabdbefed9bf6e5a9cf02c720d\",\n    \"0x74c872dd23d2f4c979659c275a603dde518c25750cf6e2be35695702a0cf88ce\",\n    \"0xb1e4196e0c873926caebef1f23eacfd57950281d11e28bdb631b930ec1843b7f\",\n    \"0x97e8589b6b8526108fe01f5c99be03bd29e48e67df8d9a8ea171b823711dc346\",\n    \"0x6f5c8b6cbee70caefbdcc1cd9ac3c68beda9bb9d2f0a1f71381f50e05e3f7508\",\n    \"0x95313925d322a632dbdec47d00755ae9b315eb7acc6b02ad2395a5d5e90906b1\",\n    \"0x68f411b127b5f0be2927ed425e853fac435e5c0a3cdab289fb7d349f68cacae6\",\n    \"0x9db0903d752e5c50f2ff1f6d1aff8e8bc08dff7776f6da4f55dc9a6a47e5332f\",\n    \"0x0181663506b91539ac52fa3a234a748a6b3388c32a49c78cd02d73dcb253ba3d\",\n    \"0xbdc27b15f675feedbc7175e926bc756de1be73465e0d4cd88e7bcb1896798a9d\",\n    \"0x6587551f27a940a65cf2d88c1a952af9e3e162c8c849992e95f07a74e6c250e5\",\n    \"0x2e2a16c3d32d2cd36582519ee09837050d9c917a3a335c10171383dd866986be\",\n    \"0x513a4abc759c2d30fd7f5a7e5239e72fccc1b24491b1ed99fa9f24b96e36fc88\",\n    \"0xa656f2ec48d83e119aecfd8deafa6984de9fcd32b4917ff59ec423a3e4bac913\",\n    \"0x07299f40780ea95a029aa3f2d368f78274fcfc128f3664972f7414704f642803\",\n    \"0xcf2e9d7211037ac38c847f4d5a8263183cb90ee5cf9ceab89e5e35053e985caa\",\n    \"0x462cf7ff85cc733ebdbb7c08388f85ccd3b9163951cca47cb56da37f9b4190e2\",\n    \"0x20c118e579126f0781b5b859b8b56eac07ead9e53c8bdda4ecfd3941ecae86fa\",\n    \"0x2d070bd1e3bc1804a90e2c27984c5269baf6f2f3400ea4a20237a5c2cbde61da\",\n    \"0x36a4e02de6da216cd43ce09fa461e43f61e4252f420dd8de67385a2d05236e13\",\n    \"0x3b5c33fcb7d3c4b877e493cc339db5f608b2c08fe042007c5dadd329e7fa0527\",\n    \"0x261e8abf298e31a48cdbaf81cdfbd5d7c6e65877fde8e88028f67188e0f307a7\",\n    \"0x821fd6b8b7061962a4588265767712f2ee4298497bb421b2dfbf1b7b0801a9e3\",\n    \"0xd3923be46728460ed1c9fcea012fa2c5976e02e07c13741ee807a0c1fbaf01fc\",\n    \"0x1df5d1230385523e2378765a8f5bc24bdf3dcf37299fdf83a3e7c787334c9f61\",\n    \"0x94f8af72f89f2645bfa226cd63ae115ba9219ccb567cec1fc58647ef9330ba9d\",\n    \"0x47f1048b1118bd95721a04c68045078a893ce34294ed22805d7a56ae4f52b998\",\n    \"0xaec896c429cce76b4690e84af92b351453f611deaa49ea334070db0e091d4ef1\",\n    \"0x5394ddc023eb58699dc255c48d768058c5395862446580676c87af5fe647301b\",\n    \"0x1bc1b326ecbde7f3894af7a40a1b6dc373bf3b0a7fe5727d09c8a246e3273fbf\",\n    \"0xed28b6d8ab2ea61fd2bb5d15e6a95c8d256dd0ddc3f6fef82a739264f27975f2\",\n    \"0x7d8d01f775ae13188e04cd12764f22e61c30dc6a51a2070473fa88f58ea600be\",\n    \"0x975f117746b79bc01e154cf883ad4b5c1f76e6175abfbc69293332f57f2b2fc7\",\n    \"0xc1e64199d60a6420e360ba326f4026eb61a085481baaec99f2f49224f1b1e96a\",\n    \"0x56c713263c20f284d5c8691b77601699543fd549069399b30e16947863b5eb8e\",\n    \"0x4046229eadb51aeb42babece63bcdba3e3f738be97e1bd245ac2fe13fd7c303c\",\n    \"0x3026e95fc46049401746553ac863b93bb584b83a048610f34542a11d4a55b159\",\n    \"0x46d8e4be66122a82465494fc5aac0da5e2a34f59e5f91bb96613af6e63e25cf7\",\n    \"0x8735ebc8d0bc1eab0713e0cbadeb2ab3df11dd6075a8b37969c99f516332f9d4\",\n    \"0x479f64b9c9b11921416dc6054e7eb7be3fd5f3e319f1e1092590de676e0769f5\",\n    \"0x9597a105f3043de8bcf26f586fc8879af8222ccba7400a0950d0ba7fe8f34844\",\n    \"0xdda72345b98b15cff4f157286ce2d92af3fc163a8788f047f2bfe386dad85347\",\n    \"0x7e6c1ef85466791722097f4b58db758d643b6d8c838262791b365a5859c84bd3\",\n    \"0xd4c83e18eb908b8c9f2c19de6763558eff881f9f4378c8922fabb4f1d5700122\",\n    \"0x31b942b4ca125e04c361dfd6283017aaac47f3c9a6f1f83276f53dc0e29908c5\",\n    \"0xa68c8d014861324d4fafbce81eea9fed6c404f71ec461e07d1c3671d5e7f6d2f\",\n    \"0xc8d3730587dc1406ee20f99b556225682e469c682e6e22c48c74bfdd471562a4\",\n    \"0x5a94e8fce346dd22a995992bba49ae456cd873f475d58e475e0489de338f93eb\",\n    \"0x143ab6f0a96094d908943f24a46baf0614ca25c8dfdfb24639fc02ae80317296\",\n    \"0x43ca6b3f4404c2144ab72631a623a44bd4515b314430cdd81c4dbc6646aaa5f4\",\n    \"0x400405281cb796bf98c4dda7ae4b03413be5447bcbd918be26a7d661c78b008e\",\n    \"0x6e847e60b1829a4327c55fba8a4826501768ff511308fe993260b7ea387c5efa\",\n    \"0x1d3f9a5e76d877d0f5570fcea9c9ddcbfce075c733a155c1bd21680fafe17541\",\n    \"0x829152b541d38464278f3957e029a08190720e4010ae9163fd9c5834228c33a9\",\n    \"0x3eae375ef2dbc7a3ecc9c2f99a638da48b927740910af0431953e99fd70f81df\",\n    \"0xe0ec7848bbd448b11a85dae2fd5e276dd0ea66fd774f5803578933ad0b52251e\",\n    \"0x430b358b2bd7a7aa05d789d3026464868f24796f15831700e263d1ddb8a29636\",\n    \"0xb5ad2d2802c2c7b910a27438800e32d09284d7870ff10cc8024e4fb449f34015\",\n    \"0x3d9d2b3c7ef9a4fd4e809c666b7fe772725c35fb54ea07c52b6470adbac95d94\",\n    \"0x831b4c265b7b03bf169e3760afad30b985632dad46826e3b76705bda64579f96\",\n    \"0x60d47e4b8ebf450a49ff500416b1bcca2a23c5cf6ff1db2feb1cd07b89a0d162\",\n    \"0x6b2fe3575bc0e2b9220daf457d7bde7a118d8674b920a0c888bbf547d683d0b7\"\n  ]\n}"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "{\n  \"_type\": \"Block\",\n  \"baseFeePerGas\": \"21721091641\",\n  \"difficulty\": \"0\",\n  \"extraData\": \"0x496c6c756d696e61746520446d6f63726174697a6520447374726962757465\",\n  \"gasLimit\": \"30000000\",\n  \"gasUsed\": \"16247211\",\n  \"blobGasUsed\": null,\n  \"excessBlobGas\": null,\n  \"hash\": \"0x95b198e154acbfc64109dfd22d8224fe927fd8dfdedfae01587674482ba4baf3\",\n  \"miner\": \"0xDAFEA492D9c6733ae3d56b7Ed1ADB60692c98Bc5\",\n  \"prevRandao\": \"0x8b14d8532c673877dcc735caf93392bd05603456b7745fc3f012a3e3b156acfa\",\n  \"nonce\": \"0x0000000000000000\",\n  \"number\": 18000000,\n  \"parentHash\": \"0x198723e0ddf20153951c6304093cbd97fd306c5db03287c5586c0430a986080d\",\n  \"timestamp\": 1693066895,\n  \"parentBeaconBlockRoot\": null,\n  \"stateRoot\": \"0x08b7443c83a93d4711f5c63e738c27c54a932522405b37b4ca7868a944105deb\",\n  \"receiptsRoot\": \"0xd925652022fa6da2ca5b9781ab2fd50cb05d3b4741a327f52322e2b7917d3a2f\",\n  \"transactions\": [\n    \"0x16e199673891df518e25db2ef5320155da82a3dd71a677e7d84363251885d133\",\n    \"0x6742cd57e6aefce4b96887bb3090371ac49414c6b45a21e43d9e41e0ea9ed5ab\",\n    \"0x4efc4b40d36b9fc30e7ca452df3b6ab896a18a68d89d0901ce56834abf78010f\",\n    \"0x5119dcc6bb07181742fd0366196021b120cc1c022c62ce3d3e272a7584fe4e2f\",\n    \"0x73ee5f2594e154c73590ba8339e69a553b14ccce29b5a976b2725885cf86e185\",\n    \"0xc6b97ff1b5f5e3c6c8265371f59685e49b19aece2ae16ccf4ecec0b92a5882bd\",\n    \"0xa60736e99248c01ba02957b84ecc01b4ebc4c22318b223702d924fbdf7e98df8\",\n    \"0xa5baf9116b0a65ea1615ba89086f19e92d0ecb2657bdab3393a527c8fb7e8dc4\",\n    \"0x1d5807ff7c727bb1a1f69b7561622118186900eb84f3fa494d17dfc8f2e2d1b0\",\n    \"0x24578bf2676fabd01269543dda61e53496a3282b1d9794ddb141319578052359\",\n    \"0xb243a19756f159a6f80a5b972596957cfbd671970ab414a7cac4f895b892dca6\",\n    \"0x8bd66e08dbe4a169dc82834cc382976ee80f39012e028195aa7f092929d96af5\",\n    \"0x840a6f565c23b7e873f970789c79ef652812d984824c65b8d05dc5f746f7c528\",\n    \"0xde0ca4c3db355459e8573d7d6f6373256ef1e883e331f3aaf9e4cb8bd668138d\",\n    \"0x6ffdaee7a47cd177c5280bb91cb2b82186c26056e7ade387a5c70b8137fd434e\",\n    \"0x014bbc84da61f449fd5a59204458e98b72cc2d616cb4cf40e721a2af83f47aee\",\n    \"0xec080b91deea33830c3e626201662243c66c1f3d10da01f32c4cb0ebf395012a\",\n    \"0x6f1a769116ce844973c85a0052ac184f34c162b6287ac0202dec6ffde30367e1\",\n    \"0xc9dcf8907764edffa1496f56831e81a33456bf505e925b05b04f1dd231548fda\",\n    \"0xd7e72a37c6f709a4f26e22d721b42ff0f1065ecd9edc60468868a7c74f521154\",\n    \"0xe70c7688bb5eba40c0da34677c19fecc9cb6ceacc3cb36c9afee9bd1b9cfe664\",\n    \"0xcff1595448f469499873536bab2987ad6c032a71ac7001eed97d1bbac244ed9e\",\n    \"0x48bb2135369bda57cdca5b7629dad74595c51a12ed7a38618db8dfca4856543f\",\n    \"0xe4f6e284ac5556727ff6be1a1fa888198d131415e596db4ed79ca9f4ef44a873\",\n    \"0xe4fa256ff9253a15735ebb89b2845d9469a57757b30dbbe340fdb73375a26f22\",\n    \"0xf5a74705de048cb35bf1b7287e4845dd2211a4c4cfbd311ab31b4b7f6832255e\",\n    \"0x9b9b3a95bb8eff0575973583fec1b8f8eb1f88c096c45b63553378cc7f82ef94\",\n    \"0x10a315bbd6c9500b24debc5882cc7d9193ed314b864e26a23a2d4d343dfdfc28\",\n    \"0x4afbb8753290b4bdabd83519f428af30ad2ff0a203351fe5056ee94aeefae5e5\",\n    \"0x3263541fe1ea0a580cbac71085c607288f86788d56987f66b0dd88ab2967c03a\",\n    \"0x47c6e9607460ea8528b6d769cca4f547e490f22e9895e28e945d60b6b43b5f52\",\n    \"0xb34464d93aa5dfeb60fd0dc4639927c2c77e69458b501859a3f0147ed47b2c3b\",\n    \"0xe808c4e337781bd24b4a83a80af05de99442f3aabdbefed9bf6e5a9cf02c720d\",\n    \"0x74c872dd23d2f4c979659c275a603dde518c25750cf6e2be35695702a0cf88ce\",\n    \"0xb1e4196e0c873926caebef1f23eacfd57950281d11e28bdb631b930ec1843b7f\",\n    \"0x97e8589b6b8526108fe01f5c99be03bd29e48e67df8d9a8ea171b823711dc346\",\n    \"0x6f5c8b6cbee70caefbdcc1cd9ac3c68beda9bb9d2f0a1f71381f50e05e3f7508\",\n    \"0x95313925d322a632dbdec47d00755ae9b315eb7acc6b02ad2395a5d5e90906b1\",\n    \"0x68f411b127b5f0be2927ed425e853fac435e5c0a3cdab289fb7d349f68cacae6\",\n    \"0x9db0903d752e5c50f2ff1f6d1aff8e8bc08dff7776f6da4f55dc9a6a47e5332f\",\n    \"0x0181663506b91539ac52fa3a234a748a6b3388c32a49c78cd02d73dcb253ba3d\",\n    \"0xbdc27b15f675feedbc7175e926bc756de1be73465e0d4cd88e7bcb1896798a9d\",\n    \"0x6587551f27a940a65cf2d88c1a952af9e3e162c8c849992e95f07a74e6c250e5\",\n    \"0x2e2a16c3d32d2cd36582519ee09837050d9c917a3a335c10171383dd866986be\",\n    \"0x513a4abc759c2d30fd7f5a7e5239e72fccc1b24491b1ed99fa9f24b96e36fc88\",\n    \"0xa656f2ec48d83e119aecfd8deafa6984de9fcd32b4917ff59ec423a3e4bac913\",\n    \"0x07299f40780ea95a029aa3f2d368f78274fcfc128f3664972f7414704f642803\",\n    \"0xcf2e9d7211037ac38c847f4d5a8263183cb90ee5cf9ceab89e5e35053e985caa\",\n    \"0x462cf7ff85cc733ebdbb7c08388f85ccd3b9163951cca47cb56da37f9b4190e2\",\n    \"0x20c118e579126f0781b5b859b8b56eac07ead9e53c8bdda4ecfd3941ecae86fa\",\n    \"0x2d070bd1e3bc1804a90e2c27984c5269baf6f2f3400ea4a20237a5c2cbde61da\",\n    \"0x36a4e02de6da216cd43ce09fa461e43f61e4252f420dd8de67385a2d05236e13\",\n    \"0x3b5c33fcb7d3c4b877e493cc339db5f608b2c08fe042007c5dadd329e7fa0527\",\n    \"0x261e8abf298e31a48cdbaf81cdfbd5d7c6e65877fde8e88028f67188e0f307a7\",\n    \"0x821fd6b8b7061962a4588265767712f2ee4298497bb421b2dfbf1b7b0801a9e3\",\n    \"0xd3923be46728460ed1c9fcea012fa2c5976e02e07c13741ee807a0c1fbaf01fc\",\n    \"0x1df5d1230385523e2378765a8f5bc24bdf3dcf37299fdf83a3e7c787334c9f61\",\n    \"0x94f8af72f89f2645bfa226cd63ae115ba9219ccb567cec1fc58647ef9330ba9d\",\n    \"0x47f1048b1118bd95721a04c68045078a893ce34294ed22805d7a56ae4f52b998\",\n    \"0xaec896c429cce76b4690e84af92b351453f611deaa49ea334070db0e091d4ef1\",\n    \"0x5394ddc023eb58699dc255c48d768058c5395862446580676c87af5fe647301b\",\n    \"0x1bc1b326ecbde7f3894af7a40a1b6dc373bf3b0a7fe5727d09c8a246e3273fbf\",\n    \"0xed28b6d8ab2ea61fd2bb5d15e6a95c8d256dd0ddc3f6fef82a739264f27975f2\",\n    \"0x7d8d01f775ae13188e04cd12764f22e61c30dc6a51a2070473fa88f58ea600be\",\n    \"0x975f117746b79bc01e154cf883ad4b5c1f76e6175abfbc69293332f57f2b2fc7\",\n    \"0xc1e64199d60a6420e360ba326f4026eb61a085481baaec99f2f49224f1b1e96a\",\n    \"0x56c713263c20f284d5c8691b77601699543fd549069399b30e16947863b5eb8e\",\n    \"0x4046229eadb51aeb42babece63bcdba3e3f738be97e1bd245ac2fe13fd7c303c\",\n    \"0x3026e95fc46049401746553ac863b93bb584b83a048610f34542a11d4a55b159\",\n    \"0x46d8e4be66122a82465494fc5aac0da5e2a34f59e5f91bb96613af6e63e25cf7\",\n    \"0x8735ebc8d0bc1eab0713e0cbadeb2ab3df11dd6075a8b37969c99f516332f9d4\",\n    \"0x479f64b9c9b11921416dc6054e7eb7be3fd5f3e319f1e1092590de676e0769f5\",\n    \"0x9597a105f3043de8bcf26f586fc8879af8222ccba7400a0950d0ba7fe8f34844\",\n    \"0xdda72345b98b15cff4f157286ce2d92af3fc163a8788f047f2bfe386dad85347\",\n    \"0x7e6c1ef85466791722097f4b58db758d643b6d8c838262791b365a5859c84bd3\",\n    \"0xd4c83e18eb908b8c9f2c19de6763558eff881f9f4378c8922fabb4f1d5700122\",\n    \"0x31b942b4ca125e04c361dfd6283017aaac47f3c9a6f1f83276f53dc0e29908c5\",\n    \"0xa68c8d014861324d4fafbce81eea9fed6c404f71ec461e07d1c3671d5e7f6d2f\",\n    \"0xc8d3730587dc1406ee20f99b556225682e469c682e6e22c48c74bfdd471562a4\",\n    \"0x5a94e8fce346dd22a995992bba49ae456cd873f475d58e475e0489de338f93eb\",\n    \"0x143ab6f0a96094d908943f24a46baf0614ca25c8dfdfb24639fc02ae80317296\",\n    \"0x43ca6b3f4404c2144ab72631a623a44bd4515b314430cdd81c4dbc6646aaa5f4\",\n    \"0x400405281cb796bf98c4dda7ae4b03413be5447bcbd918be26a7d661c78b008e\",\n    \"0x6e847e60b1829a4327c55fba8a4826501768ff511308fe993260b7ea387c5efa\",\n    \"0x1d3f9a5e76d877d0f5570fcea9c9ddcbfce075c733a155c1bd21680fafe17541\",\n    \"0x829152b541d38464278f3957e029a08190720e4010ae9163fd9c5834228c33a9\",\n    \"0x3eae375ef2dbc7a3ecc9c2f99a638da48b927740910af0431953e99fd70f81df\",\n    \"0xe0ec7848bbd448b11a85dae2fd5e276dd0ea66fd774f5803578933ad0b52251e\",\n    \"0x430b358b2bd7a7aa05d789d3026464868f24796f15831700e263d1ddb8a29636\",\n    \"0xb5ad2d2802c2c7b910a27438800e32d09284d7870ff10cc8024e4fb449f34015\",\n    \"0x3d9d2b3c7ef9a4fd4e809c666b7fe772725c35fb54ea07c52b6470adbac95d94\",\n    \"0x831b4c265b7b03bf169e3760afad30b985632dad46826e3b76705bda64579f96\",\n    \"0x60d47e4b8ebf450a49ff500416b1bcca2a23c5cf6ff1db2feb1cd07b89a0d162\",\n    \"0x6b2fe3575bc0e2b9220daf457d7bde7a118d8674b920a0c888bbf547d683d0b7\"\n  ]\n}"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 909825
          },
          "timestamp": "2025-08-27T20:00:35.709Z"
        }
      ],
      "summary": {
        "passed": 2,
        "failed": 0,
        "total": 2
      }
    },
    "getTransactionDetails": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "txHash": {
            "type": "string",
            "description": "The transaction hash to lookup"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "txHash"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getTransactionDetails: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"txHash\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 624928,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getTransactionDetails: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"txHash\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:36.011Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "getContractCode": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The contract's address"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "address"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "address": "0xA0b86a33E6417c4b73f2Aa8e8e8b26bB47F8B628"
          },
          "success": false,
          "toolError": [
            {
              "type": "text",
              "text": "Error getting contract code: Error while trying to get contract bytecode: [\n  {\n    \"code\": \"custom\",\n    \"message\": \"Invalid Ethereum address format\",\n    \"path\": []\n  }\n]"
            }
          ],
          "response": {
            "result": {
              "isError": true,
              "content": [
                {
                  "type": "text",
                  "text": "Error getting contract code: Error while trying to get contract bytecode: [\n  {\n    \"code\": \"custom\",\n    \"message\": \"Invalid Ethereum address format\",\n    \"path\": []\n  }\n]"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 868499
          },
          "timestamp": "2025-08-27T20:00:36.315Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "contractCall": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "description": "The address of the contract to call"
          },
          "abi": {
            "type": "string",
            "description": "The ABI of the contract function to call, in JSON format"
          },
          "method": {
            "type": "string",
            "description": "The name of the method to call"
          },
          "args": {
            "type": "array",
            "description": "Optional. The arguments to pass to the contract function"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "contractAddress",
          "abi",
          "method"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool contractCall: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"abi\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"method\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 125066,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool contractCall: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"abi\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"method\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:36.617Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "signMessage": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message to sign"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          }
        },
        "required": [
          "message"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool signMessage: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"message\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 549685,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool signMessage: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"message\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:36.919Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "ethSign": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "The data to sign. Will be converted to hex if not already in hex format."
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          }
        },
        "required": [
          "data"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool ethSign: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"data\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 248650,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool ethSign: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"data\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:37.221Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "resolveName": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The ENS name to resolve"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "name": "vitalik.eth"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "{\n  \"name\": \"vitalik.eth\",\n  \"address\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"resolved\": true\n}"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "{\n  \"name\": \"vitalik.eth\",\n  \"address\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"resolved\": true\n}"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 420838
          },
          "timestamp": "2025-08-27T20:00:37.910Z"
        },
        {
          "params": {
            "name": "ethereum.eth"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "{\n  \"name\": \"ethereum.eth\",\n  \"resolved\": false,\n  \"message\": \"Name could not be resolved\"\n}"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "{\n  \"name\": \"ethereum.eth\",\n  \"resolved\": false,\n  \"message\": \"Name could not be resolved\"\n}"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 876099
          },
          "timestamp": "2025-08-27T20:00:38.398Z"
        }
      ],
      "summary": {
        "passed": 2,
        "failed": 0,
        "total": 2
      }
    },
    "lookupAddress": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The Ethereum address to resolve"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "address"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "address": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
          },
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "{\n  \"address\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"name\": \"vitalik.eth\",\n  \"resolved\": true\n}"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "{\n  \"address\": \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n  \"name\": \"vitalik.eth\",\n  \"resolved\": true\n}"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 531231
          },
          "timestamp": "2025-08-27T20:00:39.275Z"
        }
      ],
      "summary": {
        "passed": 1,
        "failed": 0,
        "total": 1
      }
    },
    "sendTransaction": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "The Ethereum address to send to"
          },
          "value": {
            "type": "string",
            "description": "The amount to send in ether"
          },
          "data": {
            "type": "string",
            "description": "Optional. The hex data to include in the transaction"
          },
          "mockMode": {
            "type": "boolean",
            "default": false,
            "description": "Optional. If true, just simulates the transaction without sending it. Default is false."
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "to",
          "value"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool sendTransaction: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"to\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"value\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 69522,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool sendTransaction: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"to\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"value\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:39.577Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "sendTransactionWithOptions": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "The Ethereum address to send to"
          },
          "value": {
            "type": "string",
            "description": "The amount to send in ether"
          },
          "data": {
            "type": "string",
            "description": "Optional. The hex data to include in the transaction"
          },
          "gasLimit": {
            "type": "string",
            "description": "Optional. The gas limit for the transaction"
          },
          "maxFeePerGas": {
            "type": "string",
            "description": "Optional. The maximum fee per gas (in gwei)"
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Optional. The maximum priority fee per gas (in gwei)"
          },
          "nonce": {
            "type": "number",
            "description": "Optional. The nonce to use for the transaction"
          },
          "mockMode": {
            "type": "boolean",
            "default": false,
            "description": "Optional. If true, just simulates the transaction without sending it. Default is false."
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "to",
          "value"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool sendTransactionWithOptions: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"to\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"value\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 277196,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool sendTransactionWithOptions: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"to\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"value\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:39.879Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "getERC20TokenInfo": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The address of the ERC20 token contract"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "tokenAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "contractAddress": "0xA0b86a33E6417c4b73f2Aa8e8e8b26bB47F8B628"
          },
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getERC20TokenInfo: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 648546,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getERC20TokenInfo: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:40.182Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "erc20_getTokenInfo": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The address of the ERC20 token contract"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "tokenAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool erc20_getTokenInfo: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 872966,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool erc20_getTokenInfo: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:40.485Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "getERC20Balance": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The address of the ERC20 token contract"
          },
          "ownerAddress": {
            "type": "string",
            "description": "The Ethereum address whose balance to check"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "tokenAddress",
          "ownerAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "tokenAddress": "0xA0b86a33E6417c4b73f2Aa8e8e8b26bB47F8B628",
            "userAddress": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
          },
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getERC20Balance: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 110131,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getERC20Balance: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:40.786Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "erc20_balanceOf": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The address of the ERC20 token contract"
          },
          "ownerAddress": {
            "type": "string",
            "description": "The Ethereum address whose balance to check"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "tokenAddress",
          "ownerAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool erc20_balanceOf: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 349147,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool erc20_balanceOf: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:41.089Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "getERC20Allowance": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The address of the ERC20 token contract"
          },
          "ownerAddress": {
            "type": "string",
            "description": "The Ethereum address that owns the tokens"
          },
          "spenderAddress": {
            "type": "string",
            "description": "The Ethereum address that is approved to spend tokens"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          }
        },
        "required": [
          "tokenAddress",
          "ownerAddress",
          "spenderAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getERC20Allowance: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"spenderAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 855225,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getERC20Allowance: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"spenderAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:41.390Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "transferERC20": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The address of the ERC20 token contract"
          },
          "recipientAddress": {
            "type": "string",
            "description": "The Ethereum address to receive the tokens"
          },
          "amount": {
            "type": "string",
            "description": "The amount of tokens to transfer (can be decimal, e.g. '1.5')"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          },
          "gasLimit": {
            "type": "string"
          },
          "gasPrice": {
            "type": "string"
          }
        },
        "required": [
          "tokenAddress",
          "recipientAddress",
          "amount"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool transferERC20: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"recipientAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"amount\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 559070,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool transferERC20: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"recipientAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"amount\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:41.693Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "approveERC20": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "description": "The address of the ERC20 token contract"
          },
          "spenderAddress": {
            "type": "string",
            "description": "The Ethereum address to approve for spending tokens"
          },
          "amount": {
            "type": "string",
            "description": "The amount of tokens to transfer (can be decimal, e.g. '1.5')"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use. If provided with a named network and they don't match, the RPC's chain ID will be used."
          },
          "gasLimit": {
            "type": "string"
          },
          "gasPrice": {
            "type": "string"
          }
        },
        "required": [
          "tokenAddress",
          "spenderAddress",
          "amount"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool approveERC20: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"spenderAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"amount\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 905995,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool approveERC20: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"spenderAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"amount\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:41.996Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "getNFTInfo": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "The address of the ERC721 contract"
          },
          "provider": {
            "type": "string",
            "description": "Optional. The provider to use. If not provided, the default provider is used."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use."
          }
        },
        "required": [
          "contractAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getNFTInfo: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 643802,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getNFTInfo: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:42.299Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "getNFTOwner": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "The address of the ERC721 contract"
          },
          "tokenId": {
            "type": [
              "string",
              "number"
            ],
            "description": "The ID of the token to check"
          },
          "provider": {
            "type": "string",
            "description": "Optional. The provider to use. If not provided, the default provider is used."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use."
          }
        },
        "required": [
          "contractAddress",
          "tokenId"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getNFTOwner: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 112337,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getNFTOwner: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:42.602Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "erc721_balanceOf": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "The address of the ERC721 contract"
          },
          "ownerAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "The address to check balance for"
          },
          "provider": {
            "type": "string",
            "description": "Optional. The provider to use. If not provided, the default provider is used."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use."
          }
        },
        "required": [
          "tokenAddress",
          "ownerAddress"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool erc721_balanceOf: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 103149,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool erc721_balanceOf: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddress\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:42.904Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "getNFTTokenURI": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "The address of the ERC721 contract"
          },
          "tokenId": {
            "type": [
              "string",
              "number"
            ],
            "description": "The ID of the token to get the URI for"
          },
          "provider": {
            "type": "string",
            "description": "Optional. The provider to use. If not provided, the default provider is used."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use."
          }
        },
        "required": [
          "contractAddress",
          "tokenId"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getNFTTokenURI: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 603964,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getNFTTokenURI: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:43.208Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "erc721_tokenURI": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "The address of the ERC721 contract"
          },
          "tokenId": {
            "type": [
              "string",
              "number"
            ],
            "description": "The ID of the token to get the URI for"
          },
          "provider": {
            "type": "string",
            "description": "Optional. The provider to use. If not provided, the default provider is used."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use."
          }
        },
        "required": [
          "tokenAddress",
          "tokenId"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool erc721_tokenURI: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 909519,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool erc721_tokenURI: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:43.510Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "getNFTMetadata": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "tokenId": {
            "type": [
              "string",
              "number"
            ]
          },
          "provider": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          }
        },
        "required": [
          "contractAddress",
          "tokenId"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getNFTMetadata: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 274201,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getNFTMetadata: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:43.813Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "transferNFT": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "tokenId": {
            "type": [
              "string",
              "number"
            ]
          },
          "to": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "provider": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          },
          "gasOptions": {
            "type": "object",
            "properties": {
              "gasLimit": {
                "type": "number"
              },
              "gasPrice": {
                "type": "number"
              },
              "maxFeePerGas": {
                "type": "number"
              },
              "maxPriorityFeePerGas": {
                "type": "number"
              },
              "nonce": {
                "type": "number"
              },
              "value": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "contractAddress",
          "tokenId",
          "to"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool transferNFT: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"to\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 830155,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool transferNFT: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"to\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:44.117Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "approveNFT": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "tokenId": {
            "type": [
              "string",
              "number"
            ]
          },
          "approved": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "provider": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          },
          "gasOptions": {
            "type": "object",
            "properties": {
              "gasLimit": {
                "type": "number"
              },
              "gasPrice": {
                "type": "number"
              },
              "maxFeePerGas": {
                "type": "number"
              },
              "maxPriorityFeePerGas": {
                "type": "number"
              },
              "nonce": {
                "type": "number"
              },
              "value": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "contractAddress",
          "tokenId",
          "approved"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool approveNFT: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"approved\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 418405,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool approveNFT: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"approved\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_union\",\n    \"unionErrors\": [\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"string\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      },\n      {\n        \"issues\": [\n          {\n            \"code\": \"invalid_type\",\n            \"expected\": \"number\",\n            \"received\": \"undefined\",\n            \"path\": [\n              \"tokenId\"\n            ],\n            \"message\": \"Required\"\n          }\n        ],\n        \"name\": \"ZodError\"\n      }\n    ],\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Invalid input\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:44.418Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "setNFTApprovalForAll": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "operator": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$"
          },
          "approved": {
            "type": "boolean"
          },
          "provider": {
            "type": "string"
          },
          "chainId": {
            "type": "number"
          },
          "gasOptions": {
            "type": "object",
            "properties": {
              "gasLimit": {
                "type": "number"
              },
              "gasPrice": {
                "type": "number"
              },
              "maxFeePerGas": {
                "type": "number"
              },
              "maxPriorityFeePerGas": {
                "type": "number"
              },
              "nonce": {
                "type": "number"
              },
              "value": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "contractAddress",
          "operator",
          "approved"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool setNFTApprovalForAll: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"operator\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"boolean\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"approved\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 658290,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool setNFTApprovalForAll: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"contractAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"operator\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"boolean\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"approved\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:44.726Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "erc1155_balanceOf": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "The address of the ERC1155 contract"
          },
          "ownerAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "The address to check balance for"
          },
          "tokenId": {
            "type": "string",
            "description": "The ID of the token to query"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use."
          }
        },
        "required": [
          "tokenAddress",
          "ownerAddress",
          "tokenId"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool erc1155_balanceOf: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 243616,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool erc1155_balanceOf: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:45.028Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "erc1155_uri": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "The address of the ERC1155 contract"
          },
          "tokenId": {
            "type": "string",
            "description": "The ID of the token to query"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use."
          }
        },
        "required": [
          "tokenAddress",
          "tokenId"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool erc1155_uri: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 437260,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool erc1155_uri: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenId\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:45.329Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "erc1155_balanceOfBatch": {
      "inputSchema": {
        "type": "object",
        "properties": {
          "tokenAddress": {
            "type": "string",
            "pattern": "^0x[a-fA-F0-9]{40}$",
            "description": "The address of the ERC1155 contract"
          },
          "ownerAddresses": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "description": "An Ethereum address"
            },
            "description": "Array of addresses to check balances for"
          },
          "tokenIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The ID of the token to query"
            },
            "description": "Array of token IDs to check balances for"
          },
          "provider": {
            "type": "string",
            "description": "Optional. Either a network name or custom RPC URL. Use getAllNetworks to see available networks and their details, or getNetwork to get info about a specific network. You can use any network name returned by these tools as a provider value."
          },
          "chainId": {
            "type": "number",
            "description": "Optional. The chain ID to use."
          }
        },
        "required": [
          "tokenAddress",
          "ownerAddresses",
          "tokenIds"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool erc1155_balanceOfBatch: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"array\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddresses\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"array\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenIds\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 210555,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool erc1155_balanceOfBatch: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenAddress\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"array\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ownerAddresses\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"array\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"tokenIds\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:45.631Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    },
    "getAllNetworks": {
      "description": "Get information about all available blockchain networks. Use this to identify network names, chain IDs, and RPC URLs that can be used with other Ethereum tools. When using other tools with a 'provider' parameter, you can specify any of these network names.",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [],
      "summary": {
        "passed": 0,
        "failed": 0,
        "total": 0
      }
    },
    "getNetwork": {
      "description": "Get detailed information about a specific blockchain network. This provides the network's chain ID, native token, and RPC URL that can be used with other Ethereum tools. This network name can be used as the 'provider' parameter in other tools.",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the network to get details for (case-insensitive, e.g., 'ethereum', 'polygon', 'arbitrum')"
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {
            "networkName": "ethereum"
          },
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getNetwork: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"name\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 947718,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getNetwork: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"name\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:46.135Z"
        },
        {
          "params": {
            "networkName": "polygon"
          },
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getNetwork: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"name\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 724135,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getNetwork: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"name\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:46.237Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 2,
        "total": 2
      }
    },
    "listPrompts": {
      "description": "List all available prompts in the system",
      "inputSchema": {
        "type": "object",
        "properties": {},
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": true,
          "result": {
            "content": [
              {
                "type": "text",
                "text": "{\n  \"prompts\": [\n    {\n      \"name\": \"resolveEnsAcrossNetworks\",\n      \"description\": \"A prompt that guides resolving ENS names on Ethereum mainnet and performing operations with the resolved address on other networks.\",\n      \"arguments\": [\n        {\n          \"name\": \"ensName\",\n          \"description\": \"The ENS name to resolve (e.g., 'vitalik.eth')\",\n          \"required\": true\n        },\n        {\n          \"name\": \"targetNetwork\",\n          \"description\": \"The target network to perform operations on (e.g., 'MEGA Testnet', 'Optimism')\",\n          \"required\": true\n        },\n        {\n          \"name\": \"operation\",\n          \"description\": \"The operation to perform: 'balance' for ETH balance, 'txCount' for transaction count, 'code' for contract code\",\n          \"required\": true\n        }\n      ]\n    }\n  ]\n}"
              }
            ]
          },
          "response": {
            "result": {
              "content": [
                {
                  "type": "text",
                  "text": "{\n  \"prompts\": [\n    {\n      \"name\": \"resolveEnsAcrossNetworks\",\n      \"description\": \"A prompt that guides resolving ENS names on Ethereum mainnet and performing operations with the resolved address on other networks.\",\n      \"arguments\": [\n        {\n          \"name\": \"ensName\",\n          \"description\": \"The ENS name to resolve (e.g., 'vitalik.eth')\",\n          \"required\": true\n        },\n        {\n          \"name\": \"targetNetwork\",\n          \"description\": \"The target network to perform operations on (e.g., 'MEGA Testnet', 'Optimism')\",\n          \"required\": true\n        },\n        {\n          \"name\": \"operation\",\n          \"description\": \"The operation to perform: 'balance' for ETH balance, 'txCount' for transaction count, 'code' for contract code\",\n          \"required\": true\n        }\n      ]\n    }\n  ]\n}"
                }
              ]
            },
            "jsonrpc": "2.0",
            "id": 152210
          },
          "timestamp": "2025-08-27T20:00:46.540Z"
        }
      ],
      "summary": {
        "passed": 1,
        "failed": 0,
        "total": 1
      }
    },
    "getEnsResolutionGuidance": {
      "description": "Get guidance for resolving ENS names across networks and performing operations",
      "inputSchema": {
        "type": "object",
        "properties": {
          "ensName": {
            "type": "string",
            "description": "The ENS name to resolve (e.g., 'vitalik.eth')"
          },
          "targetNetwork": {
            "type": "string",
            "description": "The target network to perform operations on (e.g., 'MEGA Testnet', 'Optimism')"
          },
          "operation": {
            "type": "string",
            "enum": [
              "balance",
              "txCount",
              "code"
            ],
            "description": "The operation to perform: 'balance' for ETH balance, 'txCount' for transaction count, 'code' for contract code"
          }
        },
        "required": [
          "ensName",
          "targetNetwork",
          "operation"
        ],
        "additionalProperties": false,
        "$schema": "http://json-schema.org/draft-07/schema#"
      },
      "testCases": [
        {
          "params": {},
          "success": false,
          "error": {
            "code": -32602,
            "message": "MCP error -32602: Invalid arguments for tool getEnsResolutionGuidance: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ensName\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"targetNetwork\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"expected\": \"'balance' | 'txCount' | 'code'\",\n    \"received\": \"undefined\",\n    \"code\": \"invalid_type\",\n    \"path\": [\n      \"operation\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
          },
          "response": {
            "jsonrpc": "2.0",
            "id": 426038,
            "error": {
              "code": -32602,
              "message": "MCP error -32602: Invalid arguments for tool getEnsResolutionGuidance: [\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"ensName\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"code\": \"invalid_type\",\n    \"expected\": \"string\",\n    \"received\": \"undefined\",\n    \"path\": [\n      \"targetNetwork\"\n    ],\n    \"message\": \"Required\"\n  },\n  {\n    \"expected\": \"'balance' | 'txCount' | 'code'\",\n    \"received\": \"undefined\",\n    \"code\": \"invalid_type\",\n    \"path\": [\n      \"operation\"\n    ],\n    \"message\": \"Required\"\n  }\n]"
            }
          },
          "timestamp": "2025-08-27T20:00:46.843Z"
        }
      ],
      "summary": {
        "passed": 0,
        "failed": 1,
        "total": 1
      }
    }
  },
  "errors": []
}